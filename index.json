[{"authors":["admin"],"categories":null,"content":"I am now an invited lecturer in Zhejiang University and also an independent developer and researcher.\nI graduated as a master student of artificial intelligence from the Zhejiang University CAD\u0026amp;CG National Key Lab ZJULearning Group. I was very fortunate to be advised by Prof. Deng Cai. My research includes machine learning, data mining, deep learning, computer vision, operating system, system programming, and database. I have worked as a system developer in Optiver Shanghai and have interned as a machine learning engineer in Hangzhou FABU and Google.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://conanhujinming.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am now an invited lecturer in Zhejiang University and also an independent developer and researcher.\nI graduated as a master student of artificial intelligence from the Zhejiang University CAD\u0026amp;CG National Key Lab ZJULearning Group. I was very fortunate to be advised by Prof. Deng Cai. My research includes machine learning, data mining, deep learning, computer vision, operating system, system programming, and database. I have worked as a system developer in Optiver Shanghai and have interned as a machine learning engineer in Hangzhou FABU and Google.","tags":null,"title":"Jinming Hu","type":"authors"},{"authors":[],"categories":[],"content":"接上次的文章，这次介绍的是 MIT 6.042J Mathematics for Computer Science\n也许可以翻译成计算机中的数学，或者计算机应用数学，其内容与一般说的离散数学比较接近。\n在介绍这门课之前，我先讲讲标题的故事，这个故事是关于数学大师陈省身先生的。2002年8月的国际数学家大会(ICM2002)在北京举行，时年91岁高龄的陈省身先生也参加了这次大会。大会期间，大会的主办方邀请陈省身先生题一句词送一句话给当时参会的少年儿童，分享自己看待数学的观点，并激励大家。陈省身先生没有多想，就在纸上一挥而就了四个字：\n陈省身先生认为，这是最能代表他对数学的看法的四个字。\n然而不幸的是，在国内现在的数学教育体系中，同学们往往感受不到数学的乐趣。无论是教材、还是课堂，数学课似乎总是”莫名其妙提出某个定理-\u0026gt;证明之-\u0026gt;莫名其妙提出下一个定理-\u0026gt;证明之“这样一种循环，让人觉得枯燥乏味。这样的教学结果，会让同学很多时候只能死记硬背一些定理、证明等等，而不能形成自己对数学的理解，更不用说是自己的数学体系了。结果，不仅数学学得不扎实，还可能会失去对数学的兴趣，甚至是对数学产生恐惧。然而数学不仅仅是一门学科，还是一个非常重要的工具。学不好数学，掌握不好这门工具，说是贻害无穷也不足为过。\n说回标题，我个人认为，数学，或者至少是基础的数学（如微积分、线性代数、概率论与数理统计、离散数学等），是可以而且教得非常好玩的。当然，这是一件很难做到的事情，比如说我自己就没有在现实中听过这样的课程。因此我个人对于一门数学课的最高评价，就是”这门课真好玩“。这次推荐的这门课程MIT 6.042J，在我看来就是一门好玩的课程，甚至可以说是我最喜欢的数学课程。\n这门课程主要讲述了计算机中常用的一些数学知识，包括归纳演绎、集合论、数论、图论、计数、概率论、递归等等，包含的内容非常多。更重要的是，授课教授Tom Leighton利用非常高超的授课技巧、多种多样的授课道具和精巧的知识组织，使得这门课程的学习变得有趣又简单。这里举一个我印象深刻的例子。有一次课是讲级数。一开始，教授拿出了一些同等大小的木块，然后让学生们从讲台上的边缘开始叠小木块，使得叠起来的小木块能够尽量远地离开讲台，同时又不能翻下去。并且，教授让学生们和TA团队比赛，看谁搭得远，如果学生更远，他就输给学生100美元。最后的结果是学生团队和TA团队搭建的木块离讲台边缘同样远。这之后，教授开始分析这个数学模型，最后利用级数来证明，木块能够离开讲台的最远距离是一个很小的定值。这样的数学授课形式新颖又有趣，让人印象深刻。而这样的课堂在这门课程中比比皆是，真是让人叹服。\n除了这一点以外，我从这门课程中学会的非常重要的一点是数学证明时的思维路径。举一个我第一次听到的时候觉得惊为天人的数学证明的例子。组合数中有一个定理是\n$$ C_n^k=C_{n-1}^{k-1}+C_{n-1}^{k} $$ 国内的教学一般是怎么去证明这个公式的呢？就是拆开，各种化简，最后证明等号左右两边相等。完事证完了之后，并没有觉得自己学到了什么，而且下次要用还会忘了这个公式的形式，还得去翻书。Tom Leighton在这门课上是怎么证明这个公式的呢？非常简单。我们要从$n$个物体中选$k$个物体，假如我们任意指定一个物体，那么从$n$个物体中选$k$个物体，则可以分成两种情况：\n 选这个物体。那么我们就需要从剩下的$n-1$个物体中选$k-1$个出来。所以有$C_{n-1}^{k-1}$种选法。 不选这个物体。那么我们就需要从剩下的$n-1$个物体中选$k$个出来。所以有$C_{n-1}^{k}$种选法。  所以，从$n$个物体中选$k$个物体，就是这两种情况的选法之和，证毕。Orz\n除了这类有趣的证明之外，我还从Tom Leighton身上学到的关于证明的一点是：数学证明在看公式推导的时候，一定要知道推导的目的是什么。通常来说，推导的时候都是带着motivation（动机）去推导的，希望把形式转成某个样子（比如我们更容易解的一种形式），而中间的各种变化，都是在为这个目的服务。\n总之，我认为这门课程是一门非常好玩又非常有用的课程，强力推荐大家学习这种好玩的数学课，不仅能够扎实数学基础，更能培养对数学的兴趣。不过美中不足的是，Tom Leighton似乎比较忙，所以有接近1/3的课是他当时的博士生TA来代上。这位博士生上得就一言难尽了\u0026hellip;\u0026hellip;最后导致他上得部分我都直接去看教材了\u0026hellip;\u0026hellip;希望以后会有Tom Leighton自己一个人上课的录像公开出来吧。\n","date":1608182125,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608182125,"objectID":"a13abc9952593ed448896bf50ad0702b","permalink":"https://conanhujinming.github.io/post/mit_6_042j_csmath/","publishdate":"2020-12-17T13:15:25+08:00","relpermalink":"/post/mit_6_042j_csmath/","section":"post","summary":"推荐一门好玩有用的数学课程","tags":[],"title":"MIT 6.042J 计算机中的数学：数学好玩","type":"post"},{"authors":[],"categories":[],"content":"今天在给同学们讲东西的时候，发现他们之前没学过矩阵乘法的四种表述形式（或者说四种观点？），于是给大家简单地讲了一下这四种观点。其实矩阵乘法的不同视角是非常有用的，尤其是行组合的观点和列组合的观点，不仅在很多公式推导的时候非常好用，而且也更能帮助大家从更本质地角度来理解矩阵乘法的意义。\n回想起来，国内多数学校多数老师的线性代数的教学我认为是存在非常大的问题的（这样是不是有点太一棍子打死所有人了）。从这门课程的教材中就可见一斑。国内的教材常常从行列式开始讲起，让人一头雾水地栽进疯狂计算的大坑。完事算了半天，也不知道行列式这玩意儿的意义究竟是啥，只知道好像可以用来按照某种机械地方式解方程。之后呢，教材就从行列式开始“引入”矩阵，然后开始给一些乱七八糟的定理和结论，什么伴随矩阵啥的。学生们则根本抓不住要点，不知道这些东西的意义是什么，有什么作用？学得是一头雾水（当然我怀疑很多老师自己也是一头雾水）。最后机械地把整本书学下来，但仍然感觉抓不住这门课的精髓，只觉得数学好难好抽象好难懂好难学啊。考试之前突记刷刷题背背定理证明啥的，也能考个不错的分数，然后就将其抛之脑后了。结果到了大二大三后续课程的学习中，甚至是到了研究生阶段的学习过程中，却往往发现这玩意儿无处不在，但自己又常常看不懂各种推导，痛苦得不行。归根结底，我觉得这种现象还是由国内的教学问题所引起的。\n在这种情况下，我极为推荐大家用一门课程来正本清源一下线性代数：\rMIT的18.06。这门课由数学家Gilbert Strang讲授。Gilbert Strang的讲授非常清晰且富有insight，绝对能让你对线性代数的理解焕然一新。我印象最深刻的就是矩阵乘法的四种形式，以及矩阵的四种空间了。学了之后，感觉线性代数并不晦涩难懂，反而变得具体有意义且有趣了。按我自己学习的经验来看，这门课的学习对很多其他课程的帮助绝对可以说是让我受益无穷。值得一提的是Gilbert Strang教授同样是一位学术成就很高的数学家，然而早已功成名就的他，至今仍以接近80岁的高龄在教学一线上讲课，仍然每年执教这门课程，并在努力改进课程与教材内容。相比之下，国内的一些学校无论是课程质量本身，还是部分老师对待教学的态度，也许仍然需要好好追赶啊。师者，所以传道受业解惑也。所谓大学，当教书育人、为学生传授知识与帮助学生塑造健全的人格与价值观。一味地求仕创薪可不行啊。\n附：关于这门课程，知乎上已经有了很多推荐和讨论了。去年清华大学将线性代数教材换成了Strang写的18.06的教材在知乎上还引起了大量讨论。其实在此之前，就有一些国内的老师（如北大、复旦、上交的部分老师）已经在用这本教材上课了。对于清华的这种行为，我只能说，请加大力度。\n","date":1608175568,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608175568,"objectID":"342c9849c9f886a3488273c27df5fd9d","permalink":"https://conanhujinming.github.io/post/mit_18_06_linalg/","publishdate":"2020-12-17T11:26:08+08:00","relpermalink":"/post/mit_18_06_linalg/","section":"post","summary":"推荐一门线性代数课程","tags":[],"title":"MIT 18.06：线性代数易懂且有趣","type":"post"},{"authors":[],"categories":[],"content":"看到最近的浙大动科女博士自杀事件，不禁一声长叹，这样的事情发生得实在是太多了。他们本是天之骄子、是初升的朝阳、是国家顶尖的学子、是社会的未来和希望。他们中许多人怀着对科研殿堂的憧憬与向往，怀着对冲击人类知识边界的期盼与渴望，也怀着对声名在外、头衔满目的导师的崇拜与仰望做了选择，却一头撞在残酷的现实面前，发现科研并不如自己所想的那般神圣，而导师也不像自己所想的那般为人师表。他们在剥削与压榨之下苦苦挣扎却又苦不堪言，他们中的一部分靠自身能力做出成果、成功毕业，一部分因为压力与压榨出现心理问题，还有一小部分甚至因此选择轻生。他们，就是在渣导压迫下生存的博士们。\n老师是一个多么神圣的词，教书育人、为人师表、诲人不倦、百年树人、春风化雨\u0026hellip;\u0026hellip;我们有很多很多形容师德的词。一位好的老师对于学生教育的影响是巨大的。但是反过来，一位师德败坏的老师对于学生的影响也是毁灭性的。而研究生，尤其是博士生的导师，对于博士的影响几乎可以说是无出其右。想一想，绝大多数高校的博士生们的毕业都需要导师签字，那么得罪了导师之后，博士们还想不想毕业了？那么转导师呢？诚然，高校的确是有提供转导师这样的选项，可如果原先的导师不同意放人，那新的导师也不敢接收呀：谁会为了一位也许素未平生的学生而得罪自己可能要共事几十年的同事呢？那么直接退学呢？这个代价对绝大多数博士来说可能是巨大的，因为一旦退学，就意味着过去几年的努力与忍辱负重都随之而去，而自己可能只能拿一个本科学位。在这样的背景下，博士往往就成为了导师手心里的蚂蚁，任其拿捏，导师想让博士做什么，博士为了毕业，也只能忍辱负重，乖乖照做。当博士的生存境况几乎任由导师掌控，那也就只能寄希望于导师的师德优良了。\n究其原因也非常简单：导师的权力过大，却又没有相应的监督机制。权力没有监督，就很容易导致权力的滥用。\n那么如何引入针对这种权力的监督机制呢？我想还轮不到我这个小人物来给出什么有建设性的意见或者是建议，相关部门和机构应该很清楚怎么监督。我这里仅从个人经历出发，给各位同学一些我认为可能有帮助的建议。\n在选择导师之前，一定要了解清楚导师 一定一定要想法设法去了解清楚自己的未来导师，尤其是人品、师德方面的情况。可以想办法去网上检索信息，去\r这样的github项目或者\r这样的推荐网站上获得一些信息；而更好的办法是能想方设法地去接触一些靠谱的在导师处就读的学长学姐（已毕业的可能更好）了解情况 ，甚至是自己去实验室观察、体验一段时间，看看导师对学生的态度是怎么样的，大家是不是比较开心等等。\n被压迫的同学要团结 如果不幸落入渣导手下，如果能走则尽量走；如果走不了，那么希望一个实验室的学生们能团结起来，至少可以互相鼓励、互帮互助、互相关注心理健康等，甚至可以进行一些反抗等\u0026hellip;\u0026hellip;强烈建议同学们不要背叛自己的阶级，而帮助渣导一起压榨剥削同学（还真听说过这样的例子）。往道德方面说，这是不仁不义；哪怕功利点说，这也无非是充当渣导的走狗，而且很可能哪天就被当弃子一般抛弃，而与自己的同学朋友的关系可能是能维持一生的。\n寻求多元化的价值观 最近有一篇很火的文章《绩点为王，中国顶尖高校年轻人的囚徒困境》，大概是说现在国内高校年轻人十分内卷，大家都为了GPA等“硬性指标”绞尽脑汁、焦头烂额；而尽管很多同学都已经拼尽全力，却仍然感到十分焦虑，对未来感到迷茫。我个人认为，导致这种情况的一个重要原因，就是如今相对单一的价值观。（单一的价值观则往往来源于单一的评价指标，而归根结底，可能还是教育资源的不足）\n这种价值观不是仅仅在一个地方体现，甚至可以说我们自己就在这样的教育下长大。小学的时候要努力考到好的初中，初中的时候努力考到好高中，高中的时候努力考好大学，大学了又要好好刷GPA\u0026hellip;\u0026hellip;也许从小就接受教育“要赚大钱、要出人头地”等等。我不是要反对这样的价值观不好。只是过于单一的价值观更容易酿成悲剧。从小就一直是成绩拔尖的天之骄子，到了本科或者博士之后“泯然众人”了，甚至于退学了，在这样的价值观的压迫下会不会更容易产生心理问题呢？\n\r《恰同学少年》第四集中讲了杨昌济先生给一师的学生上的第一堂课，这一堂课的内容就是修身：\n​\t何谓修身，修养一己之道德情操，勉以躬行实践，谓之修身。古人云，修身齐家治国平天下，也就是说，修身，是一个人，一个读书人，一个想成为堂堂君子之人，成才的第一道门槛\u0026hellip;\u0026hellip;你们会问，什么是修身的第一要务呢？两个字，立志。\n立志，也就是树立自己的志向，这是认识自我的重要一步。我个人认为，人们不仅应该关注自己”针对外界的成长“，即所谓的名校、高GPA、金钱荣誉等，同时也应该关注自我内心的成长，而认识自我，就是其中重要的一环，是应该贯彻人的一生的一件事情。终其一生，我们应该思考自己的志向是什么，自己的优点与弱点是什么，自己向往的是怎么样的生活等等。那么，大家不妨问问自己，眼下周围所盛行的相对单一的价值观，真的是自己想要的吗？（学cs的同学，如果是打算找工作的话，我强烈建议不要死盯着GPA，来刷名校的网课与lab吧！）\n有条件的话，坚持锻炼 根据我个人经验，锻炼/健身可以很好地帮助个人调整状态、缓解焦虑情绪，也能帮助缓解焦虑带来的失眠等症状。而且，生活如此艰辛，那么更需要我们有一个健康的体魄来迎接挑战。本人有过几次心理状态非常糟糕的时期，所幸有朋友们带我健身，这才能挺过去。关于健身，推荐参考施瓦辛格的《施瓦辛格健身全书》，我跟着这本书前后练了一年左右（中间因为疫情停了半年），体重从60kg不到涨到了70kg左右。\n应对焦虑的一些方式 这里给出一些与处理焦虑相关的TED演讲，供大家参考。（不好意思都是youtube链接，还请见谅）\n\rWhat makes a good life? 什么是快乐人生的秘密？：如果问你这个问题，你会怎么回答？有些人可能会说是钱，有些人可能会说是荣誉，有些人可能会说是地位。这个演讲讲述了哈佛的一个长达八十年的研究，研究的结论是: good relationships make life better，好的关系造就快乐人生。所以，找一些志同道合的好友吧！一起分享生活的喜悦与苦涩，分享学习进步的开心，分享思考的点点滴滴，分享爱情的欢欣与失恋的落寞。与自己的家人成为好朋友吧！告诉他们你爱他们。当然，最重要的可能是，要找到适合的伴侣。\n\rThe Secret of Becoming Mentally Strong. 内心强大的奥秘：内心强大的人是如何面对挫折却又百折不挠？他们是如何应对焦虑的呢？Amy Morin从反方向指出，对自我的”病态“认识是阻止很多人变得内心强大的重要阻碍，并给出了一些建议。\n\rHow to cope with anxiety. 如何应对焦虑剑桥大学的Olivia Remes做了一系列关于焦虑的研究。她首先指出，并不是所有焦虑都是对人有害的，有些焦虑情绪实际上是在保护人自身。同时，他们也研究发现，生活贫困的人相比生活富裕的人更容易出现焦虑问题。进一步的研究发现，并不是所有生活贫困的人都会出现焦虑问题：实际上，有一部分生活贫困的人有一些略有些与众不同的应对措施，而这些措施使得他们更不容易焦虑。这些措施包括：\n Feel like you are in control of your life. 感觉自己”像是“在掌控自己的生活。 Keep this in mind: anything worth doing is worth doing badly the first time. 任何值得做的事情，都值得第一次做得很糟糕。第一次论文写得很差？没关系，论文是值得写的，所以它值得第一次写得差。第一次演讲讲得很糟糕？没关系，演讲是值得讲的，所以它值得第一次讲得差。第一次面试表现糟糕？没关系，面试是值得面的，所以它值得第一次面得差。同样记住，practice makes perfect，万般磨练，方臻化境。从第一次的糟糕中吸取教训，会帮助下次做得更好。 Forgive yourself for any mistakes you think you might make. 原谅自己所犯下的错误。有的时候，越优秀的人，越不容易原谅自己犯下的错误。“啊！要是我当时论文这一段这么写就好了！”或者是”啊，如果我当年那门课没考这么差就好了“诸如此类。然而，研究表明，这样的想法更容易导致焦虑，而焦虑则会使得之后更容易犯错。更好的做法也许是原谅自己，吸取教训。 Having a purpose and meaning in life. 找到自己人生的追求。  还有个找不着了：这个ted演讲大概是说，阻止一个人走出低谷的，不一定是这个人有哪些情绪上的好习惯，而恰恰是有哪些情绪上的坏习惯。实际上，一个情绪上的坏习惯，有可能就会拖拽着一个人久久走不出情绪低谷。因此，演讲者建议大家好好思考一下有哪些情绪上的坏习惯，并着手一个一个去改进。\n\rThe skill of confidence 自信的技巧：这个演讲首先告诉大家自信是极为重要的。而更为重要的是，自信是一个技巧，是可以通过一些方式来磨练的。Ivan Joseph给出了一些磨练自信的技巧，其中最重要的一个是：Stop negative talk to yourself. 不要自己给自己心理暗示，告诉自己不行。\n\rHow to make stress your friend 如何和压力做朋友：这个演讲是最有意思的，因为演讲者给出了一个有趣的研究观点：压力对人的身体有伤害，而这个现象，只会存在于那些相信压力对身体有伤害的人身上。听上去是不是很像一句古话，”信则有，不信则无“。还有一个非常重要的观点是，当人出现紧张、压力、焦虑反应的时候，如心跳加速、呼吸急促等，不要太害怕，告诉自己，这是身体在为应对挑战做准备。\n另外还有很重要的一点，与朋友们多多交流。我自己感觉当自己压力很大很焦虑的时候，与朋友们的交流能够极大地缓解我的焦虑，哪怕只是和大家吐吐槽、闲聊等等。也不要太担心自己会让朋友们不高兴，大家往往都是很好的人。况且，生活会有如此多的波折，所以更需要互相扶持才能顺利地度过难关。在这里也特别感谢我的诸位亲人朋友们对唠叨的我的担待Orz\n如果感觉心理出现问题，及时求助 中国人的传统文化似乎有些讳疾忌医，而在心理方面似乎尤其如此。一方面可能是不愿意承认自己心理也许出了问题；另一方面也许是怕其他人知道嘲笑；还有一些同学可能是觉得心理问题与疾病挂不上钩。其实大可不必如此。首先，心理问题严重到一定程度的时候则的的确确是疾病，就像感冒发烧一样。如果是发烧，那么人们往往会去看病，也许会吃药甚至挂点滴；心理问题也是一样，同样需要去咨询与治疗，必要的时候甚至需要服药。其次，我相信周围的同学朋友亲人们知道之后并不会嘲笑，而会有很多朋友很温暖地提供一些力所能及的帮助：你不是一个人在战斗。最后，让专业人来做专业事，严重的心理问题，外行人是很难解决的。\n因此，我强烈建议自己怀疑有心理问题的同学及时做心理咨询、请求心理援助、甚至是就医。各大学校都有提供心理援助的方式，例如浙大的同学们可以在\r这里预约心理咨询等。\n活着，就有希望 记得以前某个夏日的午后，随手拿起余华的《活着》开始阅读。读着读着，就被里面人物之命途多舛所深深震撼：人生为什么会有这么多的苦难？但是更令我触动的还是福贵经历了这么多苦难之后，最后与一头老牛相伴时走在路上唱着歌的场景。很多人的人生的的确确会有许多苦难，但是没有什么比身体、比活着更为重要的。生死之外无大事。就像《飘》的结尾里，斯嘉丽只身一人回庄园时的背影所说，“不管怎么说，明天又是新的一天”。如果读研/读博的生活真的苦不堪言，那么可以考虑休学甚至是勇敢退学、从头再来。同时，也要有自信，就算自己眼下过得不如意，自己的学术生涯有些耽误甚至要退学重来，但自己一直勤勤勉勉、认真刻苦，也许眼下会有波动与起伏，但最终自己一定会收敛到自己这样的努力所对应的期望上的。\n最后以一首我以前在别的地方写的打油诗结尾吧~\n Let it go with the wind\nAmong the road I should sing\nTomorrow is another day\nWith the hope I should say\nAlthough someone makes me ill\nI would like to keep me still\n 就让往事随风而去\n继续一路哼着小曲\n明天又是新的一天\n无限希望就在眼前\n纵使未被温柔对待\n我将仍对生活充满热爱\n祝大家都能拥有健康快乐的生活~\n","date":1600582695,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600582695,"objectID":"928ee807c2f2138b3a6fb67b22a07efe","permalink":"https://conanhujinming.github.io/post/cope_with_anxiety/","publishdate":"2020-09-20T14:18:15+08:00","relpermalink":"/post/cope_with_anxiety/","section":"post","summary":"发表一些浅薄的看法，分享一些也许有用的建议","tags":[],"title":"关于浙大动科女博士自杀事件的感想","type":"post"},{"authors":[],"categories":[],"content":"（标题是一个危险的致敬）\n\r6.828 Operating System Engineering是MIT久负盛名的一门操作系统相关的课程。这门课程有多牛呢？举个例子，以陈海波老师为首的上海交通大学IPADS实验室可以说是国内最强的操作系统相关实验室之一，而陈海波老师等人在他们读博的时候（早在2005年左右）就完成了6.828课程的学习，甚至还以6.828的JOS系统为基础开发了Corey操作系统，并发表了一篇ODSI2008论文Corey: An operating system for many cores，该论文也是陈老师至今引用最高的论文。而后，IPADS老师也基于6.828的资源，在上海交通大学软件学院开设了多年操作系统课程。\n然而，在此之前，这门课程一直是参杂着操作系统的知识学习与前沿research内容一同教学。这样有一些问题：对于打基础的本科生或低年级研究生，前沿research的研究似乎有些难度过大而又不那么必要，而打扎实基础更为重要一些；对于高年级研究生与博士生，他们又往往早就有扎实的基础，再过一遍这些基础也许会有些浪费时间。因此，MIT今年决定将其拆为两门课程，分别是6.S081(Introduction to Operating System)和6.828(也许是Operating System Research Seminar)，而让两门课程分别适配不同的受众人群。新的6.S081对于意图补基础的同学无疑是一门更为合适与smooth的课程。更重要的是，今年这门课程决定开放课程视频！（大家再也不用看同学偷偷录的山寨视频了）顺带一提，今年是极为特殊的一年，MIT大量开放了课程的视频，如6.824、6.826、6.828等等，这对于广大学习者无疑是一个福音。大家直接在\r课程主页上就能看到全部的课程资源，还包括视频，惊喜不惊喜~~\n顺便讲一个有趣的八卦。6.S081一位授课教授\rRobert Morris是互联网蠕虫病毒的发明者。当年Morris是康奈尔大学的一名学生，写了个小的实验程序即蠕虫病毒玩，据说他是想用蠕虫病毒“测量互联网的规模”。但是他又怕被抓，就选择了在MIT释放了蠕虫，以掩盖他是来自于康奈尔的事实。结果这个病毒造成了巨大的损伤。Morris受到审判，并被定罪违犯了1986年的《计算机欺诈及滥用法案》（他也是第一个适用于该法案的人）。经过上诉，他被判3年缓刑、400小时社区服务及10,000美元罚金。Morris也许是处于内疚（大雾），后来就去MIT担任教授至今。\n八卦讲完了，那么来说说我写这篇文章的目的是什么。在我之前的一篇学习CS144的文章中我有提到自学网课的一个大问题是没有TA以及同学可以交流。所以当时建议大家自学网课的时候也可以找一些小伙伴一起学，搞一个“虚拟课程”甚至是“虚拟大学”。这篇文章的目的就是组织一个6.S081 Fall 2020的学习交流群。交流群的目的是供大家互相督促、鼓励，并交流学习经验与心得，以及互相帮助，避开一些lab里存在的坑，大家一起来通关6.S081~换言之，每一位加群的同学都应该以独立通关6.S081的Lab为目标。这里的独立，不是说大家不能交流，而只能一个人埋头苦干；恰恰相反，交流是非常重要的。这里独立指的是：\n 不能阅读其他人的代码实现，自己的代码必须自己完成。 不能找其他人帮忙debug。 可以交流思路、碰到的问题，但不应该提问一些应该自己解决的问题。例如：为啥我过不了这个case呀？有没有人能帮我看一下我这段代码哪里有bug等等。  为了尽量保证每一位入群的同学都是冲着独立通关6.S081来的，入群有一个简单的条件，即必须自己先独立完成前两个Lab的内容。实际上Lab1和Lab2与后面的Lab相比都比较简单，属于热身性质的lab。我个人认为这样能更好地维护学习交流群的单纯性。\n另外，为了保证交流群的氛围，这边也简单写一些规则，如果不愿意遵守的同学就算啦：\n 不准阴阳怪气他人。 不准参考他人代码或请他人debug，应该要独立完成Lab。 不准或尽量少无意义地水群，6.S081学习交流群应该供学习交流6.S081使用。  我注意到前两个Lab里已经有一些坑，这里也给出来，避免大家再次踩坑：\n 在开始lab之前，先按照\rtools 配环境。如果是使用ubuntu的话，我个人推荐用ubuntu20，这样可以免去自己配toolchain的痛苦；而如果是更早的ubuntu系统的话，那么需要按照页面上的指点自己build toolchain。另外使用apt-get安装的QEMU的版本估计是不够新的，如果版本号低于5.1.0，那么也需要自己手动build QEMU. 最后验证安装的时候，如果不是自己手动build的toolchain的话，可能不是按照官方说的用riscv64-unknown-elf-gcc之类的，而是其他的一些命令，具体可以在/usr/bin或者/usr/local/bin 下查看 。对于验证安装，我个人建议先确定qemu版本，再尝试在xv6运行make qemu，如果能够正常进入，应该就没有问题了。 之后阅读\rguidance 注意一个坑点是make qemu-gdb的部分，在另一个窗口跑gdb或者riscv64-linux-gnu-gdb可能都不一定有用，也许是gdb-multiarch或者是 riscv64-unknown-elf-gdb 具体同样可在/usr/bin或者/usr/local/bin 下查看。可以自己试试哪个会work\u0026gt;_\u0026lt; 如果你要用xv6的某些自带的函数，发现它们不像你想得那样工作，那么请大胆地去看源码，也许它们的实现的behavior和标准库的是不一样的\u0026gt;_\u0026lt; 并且，要敢于而且主动地去看xv6的源码，甚至可以说这些Lab的目的就是帮助你熟悉了解xv6的源码的。 如果你的机器（像我一样）很烂，在某些case上可能会碰到timeout的问题（纯粹是因为机器太烂），那么可以把gradelib里默认的timeout调大一些\u0026hellip;\u0026hellip; 想到其他的坑点会再补充。  好的，那么我就先写到这里，感兴趣的同学请独立完成前两个Lab之后加群交流~**群号为603579009，加群的时候请附上自己完成前两个Lab的github repo地址~~**谢谢大家啦\n","date":1600356050,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600356050,"objectID":"2091272389825c1e2dce84bfe53fd49b","permalink":"https://conanhujinming.github.io/post/mit_6_828_together/","publishdate":"2020-09-17T23:20:50+08:00","relpermalink":"/post/mit_6_828_together/","section":"post","summary":"MIT 6.S081/6.828学习交流小组征友","tags":[],"title":"二十八画生征友：一起来通关6.S081/6.828吧~","type":"post"},{"authors":[],"categories":[],"content":"半年前我曾经写过一篇长文，主要是关于自己的面试、学习CS心得。这篇短文给出一个我认为比较合理的自学CS的路线，以供参考。\n个人推荐首先学好英语，同时跟美国名校有视频的课程，并完成作业。这套方法是偏学院风的，比较适合时间比较多的学生。\n如何学好英语？可以参考\r这篇文章。\n需要说明的是，我的学习方法是比较偏学院风的，不适合时间不多的同学；而且这些资料也有一些门槛，所以这套学习路径可能只适合一部分人吧。注意以下推荐的课程都是我认为很好的课程，每一块内容挑选1-2门对自己胃口的课程就足够足够了，然后看视频、看reading材料**并完成作业。**这些课程有些我写了点简单的介绍文章，一并附上；还有些课程的介绍文章会在未来有空的时候写。不过我还是强烈推荐自己找到课程主页，看一下课程大纲，且课程资源都在课程主页上。至于课程视频，在B站或者Youtube上都有。\n下面是路线推荐：\n 首先建议从计算机导论课程开始。推荐MIT的6.001或者Harvard的CS50或者Berkeley的CS61A都是可以的。 之后建议学数据结构与算法。纯粹数据结构的话，Stanford的CS106系列是不错的，再包括算法的话MIT的6.006和6.046（进阶）都很好。学了之后也可以定期刷点leetcode。Berkeley的CS61A和CS61B当然也非常好，还有Coursera上的Princeton的课程。Stanford和UIUC也都有很好的进阶算法课程。 操作系统：推荐CMU的15-213和Berkeley的CS162，都是有视频有lab的好课。进阶的话推荐6.828（小伙伴都说很好，我还没做）。 组成原理、体系结构: MIT的6.004, CMU的15-213有一些，Berkeley的CS61C也非常好。有一个很有趣的游戏MHRD也不错，可以参考\r这篇文章。 MIT的6.null，实用工具介绍，可以参考\r这篇文章。 计算机网络：Stanford的CS144，lab很棒，可以参考\r这篇文章。  基本上学了第一门导论课程之后，就会知道自己接下来想学/需要学什么了，也可以参考\rMIT的CS本科的课表。\n我列出的这些课程的资源在网上都有，也基本都有视频。想要学好的话，作业一定要做。当然也有很多很好的课程这里没给出，大家可以自行发现，或者参考\rgithub项目awesome-courses（这个项目近期更新得不是很多了）\n之后看走开发岗还是算法岗路线。走开发的话，可能还要学数据库(CMU 15-445）、分布式（MIT 6.824）、软件工程（MIT 6.031) 等等；走算法的话，就从吴恩达的Coursera课程开始，然后Stanford的CS229或者CMU的10-701，然后Stanford的CS231n\u0026hellip;\u0026hellip;想走工程道路的话早日实习，有机会参加高质量的github项目开发；想走科研的话找靠谱老师跟着做，或者去发论文导向的靠谱的组实习；想去美国读phd的话找机会去参加暑研\u0026hellip;\u0026hellip;\n关于编程部分，也推荐看看Norvig的这篇文章：\rTeach Yourself Programming in Ten Years\n关于这么多课真的能自学下来吗，以及要多久，可以参考\r这篇文章。太长不读版：视课程难度与个人基础，一门CS课一般需要150小时-300小时的有效学习时间，因此请自己计算。\n学下来能拿到什么样的offer？我只是偷懒地完成了以上部分课程的一大部分内容，大概拿到了10多个offer，且基本都是硕士能拿到的很top的offer了。所以全部学下来的话应该至少能拿到比我多比我好的offer吧~~\n祝大家自学CS之路顺利、开心~Happy Learning, Happy Coding!\n","date":1598619967,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598619967,"objectID":"5b64fa705b220c11c5ce5b613f9a4051","permalink":"https://conanhujinming.github.io/post/how_to_learn_cs/","publishdate":"2020-08-28T21:06:07+08:00","relpermalink":"/post/how_to_learn_cs/","section":"post","summary":"你渴望力量吗？","tags":[],"title":"自学CS路线、资源推荐","type":"post"},{"authors":[],"categories":[],"content":"计算机网络是CS极为基础和重要的一门课，但却一直是我的心病之一，其原因在于我并没有认真地学习过这门课：我对计网的了解基本局限于考研时拿着某本国内教材死记硬背的那点知识。这么重要的课程，我却掌握得如此不扎实，这一直让我非常惶恐，所以读研之后也一直有一些想法去补一下。但是自己实在是太懒了，且读研期间也几乎没有接触到什么需要用到相关知识的地方，故而就一直像鸵鸟一样，对自己的菜视而不见。然而学习终究是没有捷径可走的，当初欠下的终归是要还的：这不，我现在的工作内容就有很大一部分是需要与网络打交道。求生欲终究还是战胜了自己的懒惰，我这才终于下定决心补一补这部分的知识。\n如之前的文章所述，我在补这些CS的知识的时候，比较喜欢找一门有视频的名校（通常是四大）课程跟着上一遍。搜了一圈，我发现四大中只有Stanford的\rCS144是有\r视频的，虽然这个视频版本是多年前的MOOC版本而非课程录像。除了视频以外，我认为自学课程最重要的一点就是这门课是否有很好的Assignment/Lab。我一看，这CS144的Lab是用C++自己实现一个TCP。就它了！于是就开始了CS144的学习。\n可能是因不适应两位教授的授课风格，看CS144的视频总是让我犯困（我甚至在某个失眠的夜晚打开了CS144的授课视频，然后成功治好了我的失眠），再加上我之前还是多多少少知道一些计网的皮毛知识，我终于决定不看授课视频而直接上手完成Lab。不得不说，Lab的设计还是非常不错的。前5个Lab从byte_stream开始，一步一步地指导你实现出一个能真实使用的TCP，总得来说有趣而又有用，且难度也不算很大。不过由于我太懒，再加上中间有一段时间非常忙没时间去写，前后拖了一个月才终于完成了前面几个实现TCP的Lab。后面两个Lab涉及到的知识似乎暂时没什么需求，只能说“下次一定”了。\n夸完了之后，也补充一下我认为CS144 Lab中存在的一些坑点。毕竟这个Lab系列只使用了一届，还不是特别完善，相信之后也会每年根据学生的反馈改进的。坑点大概有以下这些：\n 有一些设计的选择细节并没有在PDF里给出，我有的时候需要去看test case才会知道Lab希望怎样去设计。不过也许这些内容在上课的时候会提到。另外这也暴露了自学网课的一个问题：没有TA以及同学可以交流。所以大家自学网课的时候也可以找一些小伙伴一起学，搞一个“虚拟课程”甚至是“虚拟大学”。 Lab2和Lab3的test case不够多，导致错误或者是与Lab期望的设计不符的实现也能通过全部的test case。然后在Lab4里，这些问题会全部暴露出来\u0026hellip;\u0026hellip;结果就是在做Lab4的时候完全不能信任自己在Lab2和Lab3里的相应实现，这样也大大增加了debug难度。 Lab4里有两个test case即fsm_ack_rst和fsm_ack_rst_relaxed期待的行为是完全相反的。实际上在官方的FAQ页面上给出的状态机是与fsm_ack_rst期待的行为一致，但Lab4默认启用的却是fsm_ack_rst_relaxed\u0026hellip;\u0026hellip; 官方提供的VirtualBox Image中的GDB是有bug的，在cmake_build_type=Debug生成的binary上不能正确地打断点。在Lab4之前我还能靠肉眼调试，但是Lab4实在是肉眼调不动了，不得不寻求解决方案。后来问了一位之前也做过这个Lab的清华大佬，他告诉我说他用的是LLDB。我就赶紧换了LLDB，这才能愉快的进行调试。顺带一提，这位大佬在GitHub上有自己\r完成这门课程和Lab的笔记，也是值得参考的Orz 我室友后来也来做这个Lab了，据他说开了-O0之后GDB就能正常工作了，但我自己之前尝试的时候这样还是不能正常工作。  不过瑕不掩瑜，这门课程的Lab无疑是非常好的材料。扎实地掌握TCP的最好办法也许就是自己去写一个能用的TCP，写完之后对各种细节就会掌握得扎实很多，对背后的设计思想也会有更深的理解。真是眼红美国名校的课程资源啊，也希望国内的高等教育能迎头赶上吧。（如果我去当高校的授课老师，我就和CS144这类课程的授课老师沟通，基本照搬这些名校的授课内容再根据实际情况做一些小改变，简直就是不送包赢）\n不多废话了，我要去和几位大佬同学商量下一个课程该上啥了。\n","date":1596934117,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596934117,"objectID":"51a7120d063ccbe18b53106b40e4e665","permalink":"https://conanhujinming.github.io/post/cs144_tcp/","publishdate":"2020-08-09T08:48:37+08:00","relpermalink":"/post/cs144_tcp/","section":"post","summary":"研究表明，能自己实现TCP的人，很少会学不懂它","tags":[],"title":"CS144: 什么，你学不会TCP？那就来自己写一个吧！","type":"post"},{"authors":[],"categories":[],"content":"几天前下班回家的时候心血来潮，想玩玩单机游戏，但又不知道该玩什么，就问朋友们有没有推荐的游戏。室友 立马给我推荐了这款游戏MHRD，说我玩了之后肯定会爱不释手，一玩到底。我问他这游戏是玩啥的，他只是神秘一笑，说玩了就知道了。我对于他的提议向来是言听计从，就装了steam买了这款游戏，怀着好奇的心情打开了它。\n刚打开这个游戏，我就从画面和声音中意识到事情并不简单。游戏的开机画面是一个黑底白字的画面。开始之后，首先跳出来的是“microhard is booting”，随后是ROM的加载提示，与之相伴的是软盘加载的次扎次扎的声音，与夸张的风扇转动声：我眼前仿佛跳出了一台来自上世纪70年代的庞大的机器怪兽。“这什么玩意儿？”我错愕道。随后，游戏加载完成，并提示我是microhard公司的一位工程师，现在公司正计划开发一个名为cpu的组件，公司相信cpu会成为一个具有划时代意义的重要发明。不过目前公司手头上只有一些能模拟NAND电路的基本组件，所以公司需要我从NAND开始，一步一步搭建出AND, NOT, XOR等其他基本组件，再逐渐完成Mux, Demux, PC, RAM, ALU, Decoder等其他更高阶的组件，直至最后完成CPU的开发。\n“我这是玩游戏还是上课呢？”我向室友抱怨。室友嘿嘿一笑，说：“你这种跨专业的人应该好好补一补这些基础知识。我想来想去，感觉也没有比这个游戏更合适更有趣的方式了。不要慌，不懂就问我。”由于已经掏了钱上了贼船，本来只想好吃懒做玩点游戏打发时间的我只好硬着头皮继续玩了下去。\n想不到游戏设计得非常合理有趣，点一下，玩几天，玩得根本停不下来。我按照游戏的指示一步一步走下去，竟然相对顺利地一路过关斩将，甚至直捣黄龙，将最终Boss Decoder和CPU一剑斩于马下。虽然中间有一些组件的设计让我抓耳挠腮、苦思冥想，但经过仔细思考之后还是成功给出了可行的设计方案。每次成功完成一个组件的设计，都会产生不小的成就感。而经过了这一趟精心设计的旅程，也的的确确让我对计算机的底层实现有了更深的理解。\n值得一提的有几件事情：\n  每个组件的实现方式是不唯一的，有的实现方式需要的NAND数量多一些，另一些则需要得更少一些。只是给出一个可行方案，和给出最优方案的难度差距是很大的。我虽然已经通关了游戏，但很多组件都不是最优的方案，之后还得再去研究改进。针对每个组件，游戏会告诉你，你的好友中最优的方案用了多少NAND，以及世界上所有玩家最优的方案用了多少NAND。需要注意的是，世界的最优方案的NAND数量很多时候没有参考意义，因为他们是面向test case编程的。\n  有一些组件的设计工作量巨大但又比较枯燥，于是microhard公司雇了个实习生来搞定这些。看到这里的时候我不禁笑出了声：这也太真实了。\n  个人认为最后Decoder的test case是有一点问题的，玩游戏的小伙伴到时候可以留意一下。\n  最后想说，寓教于乐，让学习充满趣味又能确确实实地掌握到有用的知识，这在我看来无疑是教学中的最高境界之一。非常期待游戏制作商号称会出的续作，猜测可能是写流水线之类的。而我的室友也笑眯眯地凑过来给我推荐下一个“副本”了。\n","date":1593919433,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593919433,"objectID":"7563ee703c4e32410f136070f577945c","permalink":"https://conanhujinming.github.io/post/mhrd/","publishdate":"2020-07-05T11:23:53+08:00","relpermalink":"/post/mhrd/","section":"post","summary":"一款学计算机数字电路的有趣游戏","tags":[],"title":"MHRD: From NAND to CPU","type":"post"},{"authors":[],"categories":[],"content":"本文较长，大约会有万字左右，这里提供一个目录给大家各取所需~\n \r本文简介 \r综合英语能力的提升方法  \r写在前面 \r阅读  \r增加词汇量 \r长难句 \r阅读原著 \r语法   \r听力  \r精听 \r泛听   \r口语  \r纠正发音 \r积累语料 \rShadowing \r演讲的能力 \r心态   \r写作  \r积累语料 \r改文章 \r翻译文章     \r托福雅思等考试的准备方式  \r雅思备考 \r雅思写作 \r雅思口语 \r托福备考 \r托福阅读 \r托福听力 \r托福口语 \r托福写作   \r针对面试的英语口语 \r写在最后  本文简介 英语是一项极为重要的个人能力。其作用至少体现在：\n  许多优秀的学习资料是用英文承载的。如今互联网非常发达，许多高校也经常会在网上公开自己的课程与学习资料，而这些学习资料往往都是没有中文翻译版的。纵使有翻译版本，其翻译质量往往也不忍直视。如果英语不好，那么就很难利用这些优秀的资源，那学习质量就可能大打折扣。\n  英语对拿下许多外企的offer非常重要。许多外企的工作语言就是英语，在这些外企工作，你常常需要阅读、书写英语，甚至需要用英语口语和同事交流。\n  在一些工作场合中，顾客也许是来自其他国家的，那么就需要使用英语与他们交流。\n  英语是许多考试（例如高考、考研）中的关键一项。\n  如果希望出国学习甚至工作，英语是不可缺失的一项能力。\n\u0026hellip;\u0026hellip;\n  这篇文章前半部分先简单总结一些我个人觉得比较有用的提升英语综合能力的方式，供大家参考。文章的后半部分简单分享我（多年前）参加英语考试（主要就是托福）的备考经验，也供大家参考。由于我上次专门学习英语已经是16年考托福的事情了，学习方法忘了不少，且受限于个人能力等，这篇文章中一定会有不恰当或者不通用的学习方式，还请大家谅解。\n总得来说，英语的能力大致可分成四类，分别是阅读、听力、写作和口语。下面将简单介绍我提升各项能力的学习方式。\n综合英语能力的提升方法 写在前面 英语的这些能力其实也是由各项子能力组成的。像阅读，就可以分为词汇量、长难句理解等能力。程序员在优化程序的时候，往往会先用profiler（性能诊断工具？）判断出程序的性能瓶颈在哪里，再针对瓶颈进行优化；学习（英语）的时候也是一样，也可以先判断一下（针对自己的需求）自己的瓶颈在哪里，然后先提升自己的痛点。例如，如果阅读的时候，常常碰到不认识的单词，那词汇量就是瓶颈所在，要背一背；如果阅读的瓶颈是一些长难句读不懂，那就要针对长难句理解进行优化。\n另外我的个人经验是，学习语言的过程虽然多数时候比较枯燥，但由于英语很有用，所以这些枯燥是值得忍受的。另外，语言其实是比较容易学习的一项技能，只要找到适合自己的方法并且投入时间，一定是会有产出的。反过来，除非是在一个全英文的环境下能够耳濡目染地提升自己的英语，否则的话，如果不投入时间，那么再好的方法也不可能有效果，nothing replaces hard work. 语言的学习离不开练习，所以针对阅读，最重要的就是多看；针对听力，最重要的就是多听；针对写作，最重要的都是多写；针对口语，最重要的就是多说；针对托福雅思，最重要的就是刷真题练习。本文之后的部分就不再强调练习的重要性了。再说一句，我比较提倡学习的时候尽量去建立正反馈，但很遗憾我自己没总结出来比较有趣的学习英语的方式，甚至我的一些学习方式是比较痛苦的。所以我的经验不一定适合大家，也欢迎大家补充更好的或者其他不同的学习方式。\n学习英语的时候，如果能有一个比较好的环境的话，效果会好很多。如果没有的话，就只能自己努力创造、模拟一个这样的环境，比如和小伙伴用英文聊天讨论问题等等，虽然可能会有点尬\u0026gt;_\u0026lt;或者是用类似本文提到的自学方法。至于报班，这个因为我没报过，不敢多说。不过我后面会提到，有一些比较野鸡的机构的班、课程最好还是不要报，浪费钱浪费时间浪费生命。\n最后的一个指导思想是，学习英语的时候常常需要使用各种材料（如阅读、听力材料扽等），一定要学会选择适合自己的材料。材料的难度最好是自己要费一些力气能搞定，但又不是完全搞定不了的水准，太难或者太简单的材料都不合适。当然，我这里列出来的基本上都是自学英语不出国不报班的学习方式，如果各位能出国学习、生活，那我建议就无视我这些方法，直接去野生的英语海洋里闯荡吧。\n阅读 增加词汇量 词汇量对于阅读能力至关重要。这方面对我启发比较大的是杨鹏的《17天突破GRE词汇》。这本书的名字虽然浮夸了一点，但里面传达的思想与学习方法我认为是很有价值的。我总结起来就是“每天背诵的量大，粗记，重复”。这本书很短小，也许只要一两个小时就能看完，建议大家自己去看看。背单词的时候个人不建议精背，即一个单词掌握一大堆意思用法什么的，而建议粗背，即大概知道最最常用的几个意思就够了。试图背得精的结果往往是记忆效率极低，背了后面忘了前面，效果也往往不如用同样的时间粗略地记忆更多的单词。个人感觉四六级词汇是必背的，然后考啥试就背啥词汇书，差不多有个一万左右的词汇量就足够应付大部分情况了。\n长难句 长难句是指一些语法结构复杂且很长很难理解的句子。在阅读英文、尤其是参加托福、GRE等考试的时候，这类长难句常常会成为阅读瓶颈。在高中的时候，碰到这样的长难句，老师一般会教我们拆解句子语法结构来帮助理解；然后在实战中碰到长难句，使用这样的拆解方式不仅耗时，效果也未必多好。这里同样推荐杨鹏的书《GRE\u0026amp;GMAT阅读难句教程》。杨鹏认为，攻克长难句的方式应该是平时没事看看长难句，拆解语法结构等帮助理解，直到自己的”脑容量“适应了这种长难句为止。这样，在实战中碰到长难句的时候，就可以像对待普通句子一样解决它们。\n我个人的经验是，如果要参加GRE这样的考试，那一定要练一练长难句。否则的话，其实不一定有必要。\n阅读原著 阅读英文原著是比较有趣的学习英语的方式。例如，我强烈建议学习数学和计算机的同学阅读各种经典英文教材，而不是翻译版或者是国内的挫教材。还可以阅读一些英文文学名著，例如《小王子》、《傲慢与偏见》、《动物庄园》、《1984》等等。注意要选择适合自己水平的书来阅读。如何选择呢？随便举些例子，例如自己应该能较为轻松顺畅地看懂80%以上，并且生词出现的频率一页不超过5个之类的。在阅读文学名著的时候，碰到不认识的单词可以先尝试猜，如果是比较影响理解或者出现频率比较高的单词就查询一下。查询的时候记得要安装有英英解释的词典。如果是阅读教材或者学术著作，那碰到不认识的专业术语的话是一定要理解清楚是什么意思。\n有很多人推荐阅读《经济学人》之类的材料，我个人的经验是《经济学人》难度较大，效果还一般。如果自己对时政很感兴趣的话可以看看，否则的话可能还不如看看新概念英语三四的文章之类的，还更感人一些\u0026gt;_\u0026lt;\n阅读原著是比较全面地提升英文阅读能力的方式。除了可以提升词汇量和锻炼对长难句子的理解以外，最不可替代的可能还是锻炼对大量的英文文字信息流输入的适应能力，或者抽象地说，是扩大自己对英文文字的”脑容量“吧。\n语法 自打高中以后我就再也没有看过语法相关的东西了，除了看那本GRE长难句的时候\u0026hellip;\u0026hellip;基本上阅读全靠语感。如果高中的时候英语语法学得不错，那我觉得可能就没有什么必要再去专门学英语语法了；否则的话，听说赖世雄的语法书还不错，可以考虑用用看。\n听力 精听 这个可能是这篇文章里提到的学习方法中最痛苦的一个方法了。在刚开始练习英语听力的时候，找适合自己的听力材料（如果音频对应的文字都看不懂，那就赶紧换简单的吧），然后用听写，也即光听音频，努力把内容写出来，直到听写到完全听不出来剩下的内容为止。之后去比对音频的文字，看看自己听错的是哪些地方，并分析原因。是词汇不懂？还是连读没听清？还是口音？对我来说这是一个蛮痛苦又枯燥的学习方法，一段5分钟的音频常常需要半小时以上才能听写完成。尤其是最开始的时候没找到合适的听写工具，往往要听一句手点一下暂停，手写下来之后再点播放听第二句\u0026hellip;..后来找到了一些相对好用的辅助工具，情况才好转一些。这里也简单说一下自己用到的工具，一个是\r可可英语的网站 和手机APP。APP是支持自动断句的，不过不知道APP现在还维护不\u0026hellip;\u0026hellip;另一个是一个叫Aboboo的软件，也是支持对音频的断句等对听写重要的功能。然后可以一边听一边尝试把全文用键盘打出来，效率应该比手写要高。\n我在\r之前的一篇文章中有提到过，学习的时候，获得监督信息修正自己的不足之处是很重要的，听写就是一个可以获得监督信息的方式，让你知道自己听不懂英语的原因是什么，并针对性练习。比如，比较常见的听不懂的原因就是各种连读，而对连读的理解经过对应的练习之后是可以大大提高的。\n当然，除了这样粗暴地去英语音频的海洋中磨练自己的听力，还有一些方法也可以搭配使用。例如，可以锻炼自己的听力词汇量，就是听单词的发音写下对应的意思。还可以专门去了解英语的音标对应的发音，以及一些英语特殊的发音方式，如连读、intonation等等；这方面可以与口语一起练，例如有本书叫《American Accent Training》，就可以看一下，大概了解美音的连读与intonation等；还有赖世雄的《美语音标》（我强推的书）也非常建议过一遍。\n泛听 泛听主要是为了锻炼自己对大量连续的英文听力信息流输入的脑容量，以及适应各种不同的口音等。这个同样是找一些自己喜欢的材料去听，例如可以遮住字幕看动漫、英剧、美剧甚至是看电影等。\n口语 口语和听力常常是可以一块练习的，这里就放一起说一下。\n纠正发音 强烈建议练习口语之前先纠正自己对音标的错误发音。这个过程其实花不了多少时间就可以达到不错的效果。这里强推赖世雄的《美语音标》，只需要20块钱，当场下单，两天就能过一遍。网上还有一些比较不错的视频教程，会有老师给你演示舌头摆放的位置、发声的方式等等，也挺不错的，这里就不作专门推荐了，有兴趣的话可以自己搜索一下。记得发音的时候要录音录下来，自己再去听和比对，以获得监督信息来改进发音。当然，如果你有钱请外教或者厉害的老师给你纠正口语，那就无视我的这些建议吧\u0026gt;_\u0026lt;\n积累语料 可以积累一些常用的单词，尤其是逻辑衔接词；也可以积累一些常用的用法、句式等等。 我自己没找到比较好的通用的语料集合书，这里就推荐一下慎小嶷的托福、雅思口语书中的语料，感觉挺不错的。顺带一提的是，我记得以前看过某知乎巨高赞回答，推荐了一本什么《托福口语小伴侣》之类的书，还推荐看《摩登家庭》还是啥美剧去练口语，说实话我践行过，感觉没什么效果。\nShadowing 这个是我比较推荐的练习口语的方法。总得来说就是选择适合自己的材料，然后落后于音频一点时间（例如一开始可以落后一个单词、水平高一些了就落后三四个单词之类的）跟着音频去说，同时试图去模仿音频的语调，甚至可以尝试去模仿音频当事人的情绪状态等等，类似于一种配音的感觉。手上还可以拿着音频的文本，如果不知道音频在说啥了，可以瞄一眼看看\u0026gt;_\u0026lt;\nshadowing是一种可以同时锻炼听力和口语的方法，且对口语而言是一种比较综合地锻炼方式。一方面可以磨练自己的连读、intonation等等不使用shadowing则很难锻炼的能力，另一方面则是可以锻炼自己对大量口语长时间输出的能力。很多同学不太敢开口说英语，或者就算说也是断断续续、瞻前顾后，且说不了大段的口语；这一方面固然有能力的问题，另一方面也有对说大段口语的不自信与不适应，而shadowing则可以较好地让大家适应大段口语的输出能力。\n进阶阶段，可以听一段5分钟的音频，然后自己尝试用自己的话语来复述一遍。这是一种对听力和口语能力要求都比较高的一种方式，但也挺有效果的。注意，在水平还不是很高的时候，复述的时候要录音录下来，复述完去听自己的录音，找寻其中的发音问题、连读与intonation可优化的地方、逻辑不清楚的地方以及语法错误等，并留心纠正。不录下来，永远不知道自己的口语有多垃圾。\n演讲的能力 这里单独再说一下给演讲的能力。这里说的演讲的能力不仅仅是英语演讲能力，也包括中文演讲的能力。个人感觉国内的学生往往对这方面的能力不是很重视，而美国的学生对这方面则非常重视，如MIT本科生有一门必修课就是关于沟通与演讲的。其实这方面的能力也是蛮重要的。关于演讲以及口语，我要强调的一点是要重视语言的逻辑性，可以多多使用一些衔接词来增强自己口头表达的逻辑性。这里再推荐MIT的一门开了40多年的小课程\rHow to Speak，一小时左右，强烈建议大家看看。\n心态 语言尤其是口语，存在的目的主要就是为了沟通。很多同学因为害怕犯错或者被耻笑什么的，不太敢用口语和别人沟通，或者不太敢把自己想的说出来。其实大可不必。语言是沟通的工具，但不要让语言学得不好成为阻止你沟通的原因，那就本末倒置了！有想法就大胆说，某个单词、用法一时想不起来就换个方式说；还可以利用手势、眼神等肢体动作以及白板手写示意等其他方式来帮助表达。在需要你沟通的时候，如何把自己的想法清晰地表述给别人应该是唯一目的，不要因为觉得自己口语不好就放弃沟通。\n最后厚颜无耻地放个\r视频链接来说明一下自己的口语能力。当然了，我的口语绝对不算是大神，无论是发音口音、还是用词句式甚至语法方面都有极多可以改进的地方。这个视频主要是想说明口语的目的主要还是作为沟通的工具。同时也给学英语的同学一些鼓励吧，像我这样没出过国没报过班纯靠自学的穷学生，花一些时间进去，也可以做到连说一小时英语不停，并且其他人也都能理解我的口语~\n写作 这方面其实我觉得自己没什么发言权，不过也斗胆简单说一下吧。\n积累语料 可以积累一些常用的单词，尤其是逻辑衔接词；也可以积累一些常用的用法、句式等等。 我自己没找到比较好的通用的语料集合书，这里就推荐一下慎小嶷的托福、雅思写作书中的语料，感觉挺不错的。（有没有感觉这段话有点眼熟）\n改文章 中国有句老话，大概是”好文章是改出来的“，英文写作也是一样。我个人建议，一开始写练习文章的时候，要尽力去把文章改得好一些：尽量没有语法错误（写完可以用grammarly之类的check一遍），文章的架构要合理，主题句鲜明，文章逻辑清晰容易读懂，论述合理详实等等等等。多改文章，把文章改好，每改好一篇文章，这篇好文章的写法会深刻地印在你的脑海当中，成为你英文写作的一部分。尤其是写学术论文的同学，一定要认认真真地改好文章，第一篇论文改个10遍20遍起步。这里再专门说一下文章的逻辑性，很多人的英文文章写得不好，不一定是英语不好，可能是写作本身就缺乏一些逻辑性。个人认为，语言方面略次的文章尚可以理解，逻辑错乱的文章则是无可救药的。所以我建议在最开始改文章（尤其是学术论文）的时候，可以而且应该精雕细琢每一句前后的逻辑衔接是否顺畅合理。这样改过几次之后，这种逻辑性就会成为你能力的一部分了，你就可以自然而然地写出比较有逻辑性的文章了。\n翻译文章 还有一种方法是可以找那种有中英对照文字的材料，对着中文材料翻译成英文的，再比较英文原文，看看别人的写法、用语好在哪里，并学习。这是一种可以获得监督信息的锻炼写作的方式。不过这种方式主要是培养词汇量、语料、句式等等，对于写作的思维与逻辑性的培养则有些不足，还是要与写文章改文章结合起来一起用。中英对照的文字材料就推荐新概念英语三四了。\n最后贴一个\r我之前写的一篇博客，总结了我认为学术论文写作中的一些要点，并推荐了几门英文写作书，供大家参考。\n托福雅思等考试的准备方式 关于应试英语，其实主要也是有两点。其一是提升自己的综合英语能力，这些在上面以及说了很多了；其二是提升自己对这门考试的应试能力。在这第二点上，我觉得最重要的就是刷真题，熟悉并领会题型、出题思路与套路；除此以外还要总结一些应试技巧。\n本文的这部分就根据我自己的经验简单说一些准备托福雅思的准备方法与一些我觉得有用的应试技巧，供大家参考。\n先说一下我参加这两门考试的经历。我在2015年二月左右参加过一次雅思考试，当时准备得比较赶，主要是想考出个成绩申请CSC的交流项目出国见见世面。不过可惜后面因为来自学校的不可抗力，即便拿到了offer和CSC的机会也没出成国，导致我至今没出过国\u0026gt;_\u0026lt;也许可以考虑上一下非浪的船享受一下出国的权利了。当时大概是前后用了两三周的时间，刷了官方的OG和十几套真题，然后就上考场被锤了。最后总分是7分，阅读、听力、口语、写作的分数分别为8.5、7.5、6.5和6，分数比较挫，大家轻喷。托福的话应该是2016年5月的时候参加了一次考试，彼时能力与考雅思的时候相比已经有了一些进步，然后大概也是两三周左右的时间刷了二三十套TPO，最后总分110，阅读、听力、口语、写作的分数分别为30、27、24和29。无论是托福还是雅思，我的分数都远远称不上大神，但也还算是一个不错的分数了。两次考试都能在不长时间的准备时间里一战就考出一个还不错的分数，也有一些备考、应试心得，在这边和大家分享一下。\n要强调的一点是，任何技巧都是建立在实力的基础上的。我能够利用较短的备考时间考出一个还不错的成绩，归根结底是我的英语能力本身就比较扎实，而我培养自己英语能力的方法已经在前面给出了，这里以及下文就不再赘述这些方法了，而仅仅谈论一些针对托福/雅思的方法与技巧。在有实力的基础上，配合一些针对性的备考方法与应试技巧，运气还可以的情况下就可以考出不错的成绩了\u0026gt;_\u0026lt;\n雅思备考 我个人感觉，雅思是比较容易准备的考试：过一遍OG，刷几本剑桥真题基本上就差不多够了。由于我准备雅思的时间很短，分数也不高，这边就一块说一下自己的雅思准备方法了。雅思的阅读和听力总得来说是比较简单的，刷刷真题，注意paraphrase，基本上就问题不大了。而雅思的口语和写作，又是比较考察个人的真实实力的，用很多应试技巧、模板也很难取得超过自己实力的分数。这也是为什么我说雅思的备考总体比较容易：在有实力的基础上，稍微准备准备，听力阅读就可以拿高分了，而口语写作再怎么准备也基本上就是那个分数\u0026gt;_\u0026lt;\n雅思写作 我雅思的写作分数是比较低的，这边就大概谈谈我的看法。首先推荐慎小嶷的《十天突破雅思写作》这本书。慎小嶷的十天系列书都写得不错，基本上就是每”天“掌握一块内容。不过要注意的是，要把这本书完全搞定，十天是不可能做到的，除非是每天10小时甚至24小时搞写作，例如书中的某一“天”说的是“我们今天来背单词吧，下面是常用的1500个单词，大家今天背下来吧~“\u0026hellip;\u0026hellip; 雅思的小作文的模板味道比较重，可以参考这本书的模板、句式、架构来准备与练习。有条件的话，自己写的文章可以找靠谱的人帮忙改改。值得一提的是，我当年考试的时候雅思作文是需要手写的，所以一手漂亮的字也许会有优势。而我的字就很丑\u0026hellip;\u0026hellip;\n雅思口语 当时的雅思口语考试是比较有特色，会安排一天的时间与一味考官面对面地聊一聊。在准备雅思口语的时候，我同样推荐慎小嶷的《十天突破雅思口语》。除了书中提到的东西之外，还要记得一点，只要是面试，给面试官留下的印象就会非常重要，所以可以尽量营造出一种非考试的氛围，与面试官谈笑风生，这样也许也能赢得一些语言能力之外的印象分。另外，在准备口语考试的时候，要积累一些素材。所谓素材，是指，例如一道口语题目可以是”谈谈你喜欢的一本书“，那么这个题目对应的素材实际上是可以提前准备的。而多准备一些素材，那么考试的时候问你的问题就有可能落到某个你准备过的素材上，你就可以应付得比较轻松了。我看过一本新东方的《新托福口语真经4》，里面推荐的一个方法挺有意思的，就是建议背诵一些”万能素材“，即一些可以应付多个问题的素材。举个例子，一个素材可以是介绍你喜欢的一个篮球明星。那么这个素材可以应对的问题有：请谈谈你喜欢的篮球明星；请谈谈你喜欢的明星；请谈谈你佩服的人；请谈谈你向往的人等等等等。但是雅思的口语因为是有真实的面试官的，所以面试官可以追问一些其他follow-up问题，然后就有可能发现”奥原来你之前表现出来的是背诵和准备的实力“\u0026gt;_\u0026lt; 不过背诵素材是很重要的，我认为是准备托福/雅思口语的最重要的方式之一。多背几个素材（比如10多个），那么就算碰到你没有准备过的问题，你肚子里有背过的素材，往往也可以组合背下的句式等来帮助应对了。另外记得练口语的时候要录下来自己听一听，分析不足。\n托福备考 与雅思不同，我认为托福是比较需要花时间准备的考试。这有几个原因：1. 托福的听力是比较难练的。2. 托福的口语与写作是可以通过练习取得超过自己真实语言能力的分数的。准备托福考试的最好的方式就是在具有不错水平的基础上，多刷TPO找感觉，总结和锻炼一些应试技巧。当然，在做题之前最好先看看托福的OG。\n托福阅读 我觉得托福阅读还是比较简单的。如果缺乏词汇量，那么可以用本文前半部分给出的方法去背托福的词汇。托福的阅读题基本上就是一边做题目一边顺着文章往下读，也没什么特别难的地方。\n托福听力 个人认为对大多数人来说，在没有大量练习的情况下，托福听力是比较容易翻车的。我还是比较建议在听材料的时候用自己的方式去记一些简单的笔记。理想的情况下，后面题目涉及到的考点应该都能落在听材料时记下的笔记的范围内；但实际上这不是很容易做到的，往往需要刷一些题，获得一些”题感“，能相对敏锐地感知到”哦这里好像是容易出题的地方“并记下来。\n托福口语 托福的口语由于是机考，其实是有可能获得一个超出自己实力的分数的（虽然我考得也不高）。这里同样推荐慎小嶷的《十天突破托福口语》，虽然这本书和他的雅思口语那本书重复率很高\u0026hellip;\u0026hellip;\n独立口语部分再次推荐新东方的那本《新托福口语真经4》，并参考那种方式自己背诵一些比较好的”万能素材“。在回答问题时，也可以尝试自己脑子里分一个线程注意自己的语法错误，发现了一些语法错误的时候可以自己修正。\n我当时练口语的时候，还有一个平台叫亦鸥，那上面有不少大神会分享自己的经验与技巧。尤其是托福的综合口语部分，其实是很可以应用一些技巧的。很多技巧我已经不记得了，这边大致提几个还有点印象的吧。\n 当时有一道题是会有A与B进行对话，往往是A碰到了一个困境，有两种选择方案，但都不是完美的，然后问你的建议是什么。你需要建议其中一种方案，并给出两个还是三个理由。一定要选择容易说出合理理由的方案来说，而不一定是自己内心真正的建议。这里的技巧大概有两个。一个是如果自己想不出什么好的理由的话，可以把材料中提到的这个方案对应的好处提炼成一个理由来说，但一定只能提炼成一个，否则的话理由部分就没多少自己原创的东西了，分数可能就不高了。另一个技巧是其实有一些万能理由，比如提到某个方案啥啥都好，就是贵，那理由就是“钱乃身外之物，以后都可以赚的，不重要”；提到某个方案怕相关人员不同意，那理由就是“人都是可以沟通的，好好沟通肯定没问题“等等\u0026hellip;\u0026hellip; 还有一道题，大致是先给你一篇来自学校的通知让你看，然后后面会有一段对话，对话往往是两位学生喷这则通知，偶尔也会是两个人同意这则通知，然后对话中会给出喷或者同意的理由。然后让你结合文章，概括学生的态度及原因。这里要注意的技巧就是，学生基本上都是针对通知的论点进行喷或者同意，所以阅读通知的时候要记录下通知的论点，并在听的时候要心中有数。自己在说的时候，也要结合着说。这里举一个小例子，例如两位学生看到一则学校的通知，大致意思是疫情期间不允许学生出校门，并给出学校这么认为的理由。而学生往往就会针对这些理由进行回击。在用口语回答的时候，就可以说“学校声称把学生关在学校是为了学生的安全，避免被校外人士感染，但是校外人士却可以自由进出，不受阻拦，如果有可能把病毒带到校内，那禁止学生出校门就没有意义了”，这就是一个比较好的结合通知与学生的理由进行论述的例子。这就是个例子，如有雷同纯属巧合。 还有一道题，是给一篇文章，介绍一种学术概念，然后会有一段教授的音频，对阅读中的学术概念结合具体的例子来详细说明。与上面一题类似，教授的论述是针对文章中的论点的，所以在阅读文章的时候一定要留意论点，在听音频的时候也要留意教授是如何针对论点来论述的。而在自己口语答题的时候，就可以先给出某个论点，在讲述来自教授的详实例子。例如某个学术概念可能关于把学生封闭在校园里过久，则可能引起一些心理问题，我们姑且称之为疫情综合征。文章中可能就会描述为何会容易得综合征，例如第一个论点可以是因为学生一直被关在一个狭小的地方，所以容易产生被禁闭感。教授就可能举这样一个例子，”某位世一大同学进学校之后就不能再出去，由于一直待在学校里，他产生了某种被关押在特殊地方的错觉，这对他的心理有所影响“。而在口语回答的时候，就是先回答”第一，把学生一直禁闭在学校里容易产生禁闭感。教授给出了一位世一大学生的例子blabla”。这样就是比较好的回答。再次强调，这就是个例子，如有雷同纯属巧合。 这里再提两个小技巧。在综合口语部分，要注意尽可能地paraphrase，即用不同于阅读材料/听力材料中的句式与表述方式，而不是重复材料中的话。另一个技巧是，在听完听力记完笔记之后，如何把笔记在几十秒的时间内组织成有结构的回答呢？一个方法可以是去思考哪些点可以放在一个句子里说，并用笔把放在一个句子里说的点圈在一个圈里，这样不仅能帮助自己梳理思绪、材料与逻辑，一会儿回答的时候也会做到心中有数，回答更有结构性。  托福写作 托福写作其实是我托福考试中的一大亮点，毕竟我以不算很强的写作水平取得了29分的高分。首先同样推荐慎小嶷的《十天突破托福写作》，虽然其内容基本上与他的雅思写作雷同\u0026hellip;\u0026hellip;托福写作同样分成两部分，一部分是综合写作，另一部分是独立写作。下面分别讲讲。\n综合写作是一个套路性非常强的题，锻炼好应试技巧并有适当的练习，就可以取得一个很好的分数。具体地说，综合写作是给一篇文章阅读，而后给一段教授谈论同一个话题的听力材料，听完听力之后，让你写一篇文章结合阅读材料，说明教授的观点与理由。绝大多数情况下，教授都是针对阅读材料的每一个论点来diss的，所以在阅读的时候要留意与记录论点，并听材料的时候留意与记录教授是如何diss的。除此以外，综合写作完全可以套用模板。模板类似于：\n 文章谈论了xx话题。演讲者也谈论了相关话题，然而，与文章观点不同，演讲者认为是xxx的。在演讲中，他给出了三个理由来支持他的观点。 第一，即使文章声称blabla，演讲者在演讲中指出blabla。这是因为blabla，也就是说blabla。显然，演讲者的理由有利地反驳了文章的观点 其次，（然后用另一套句式说一下上面一样的话，只不过理由与示例换掉）。 再者，（然后用另一套句式说一下上面一样的话，只不过理由与示例换掉）。 总之，演讲者用aaa,bbb,ccc三个理由有利地反驳了文章的观点，说明了他的xx观点。  大概就是这么个套路。然后多练练，考试的时候在不犯语法错误情况下多写点，比如写个350词左右，再注意paraphrase与句式多变，拿个高分是很容易的。\n独立写作的套路相对没那么强，建议大家参考慎小嶷的书。我这边就简单谈论几个小技巧吧。第一，可以背一些万能开头，到时候考场上直接把万能开头套进去，写开头的时候自己也可以思考一下后面怎么去写。第二，可以用一些简单的模板，这种模板主要是包括一些逻辑词来撑起文章的结构，但切记模板占据的字数不应该多。第三，有的时候需要举例子说明观点的时候，可以结合自己的背景举例子甚至是编造一些例子。例如我是学计算机的，我就可以举/编造一些我们领域大牛的事迹来支撑我的观点；我喜欢看篮球，也可以举/编一些篮球明星的例子。这样的好处是这些例子相对冷门，考官看了不容易感到厌烦；同时因为冷门，你编造了考官也不知道是真是假。最后，在不犯语法错误情况下多写点，比如写个600词左右。\n有条件的话，可以找靠谱的人帮忙批一下作文。为什么强调靠谱呢？我在考前两天写了一套题的作文，在某个知名平台上申请了免费批作文。该平台的老师给了我综合写作24分，独立写作21分的评价。结果两天之后我考了29分\u0026hellip;\u0026hellip;\n最后，不管是综合写作还是独立写作，最好能留一点时间检查一下简单的语法错误（三单、时态之类的）以及typo。托福的写作是敲键盘写的，要多练练敲键盘打字，甚至可以买考场同款键盘来练。\n针对面试的英语口语 在我们学院的就业分享会上，有位同学问了我这个问题；在我的上一个帖子里也有同学问到，我这里就再写一遍。\n总得来说，首先要在平时尽量去提升自己的口语实力。这个在前面已经说过了，就不再赘述。然后可以提升针对面试的英语能力。具体地说，大概有以下几点：\n 查找对应公司的面经，看面经题目，尝试用英文回答。 你会发现在这个过程中很多技术单词你不会，去查并且记忆。 重复1多次。有条件的话找朋友进行模拟面试。 按照我上一个帖子的学习方式，即用MIT等名校的英文课程学习，也蛮能提升这方面的能力的。课堂上老师常常会问问题，可以暂停自己用英文回答。上完课之后可以用英文简单复述课堂上讲了什么，并录音找茬。 面试的时候，不要因为害怕犯错或者被耻笑什么的，不太敢用口语和别人沟通，或者不太敢把自己想的说出来。其实大可不必。语言是沟通的工具，但不要让语言学得不好成为阻止你沟通的原因，那就本末倒置了！有想法就大胆说，某个单词、用法一时想不起来就换个方式说；还可以利用手势、眼神等肢体动作以及白板手写示意等其他方式来帮助表达。在需要你沟通的时候，如何把自己的想法清晰地表述给别人应该是唯一目的，不要因为觉得自己口语不好就放弃沟通。（这就是前文口语中的心态部分）  写在最后 语言的学习过程未必是有趣的，但语言尤其是英语的作用，至少在现在这个时代还是非常重要的。而使用一些合适的方法，则可以切实地提升自己的英语能力，而不是花了大量时间进去却不见效果。本文提到的所有方法都是我自己行之有效的方法，而行之无效的方法我也试了很多，这里就不再给出了。要指出的是，这些方法不一定适合所有人，甚至不一定适合大多数人，大家可以根据自己的喜好、使用的效果来选择或是调整学习方法，因时制宜、因地制宜。最后祝大家都能如愿以偿地提升自己的英语能力。各位同学，大家努力呀，我们下一篇文章再会。\n","date":1590140363,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590140363,"objectID":"2fd5b0e8f19e5dec601d6a9661d8c338","permalink":"https://conanhujinming.github.io/post/learn_english/","publishdate":"2020-05-22T17:39:23+08:00","relpermalink":"/post/learn_english/","section":"post","summary":"分享我个人认为比较有用的提升英语的方法","tags":["自学","英语学习"],"title":"自学英语的经验分享","type":"post"},{"authors":[],"categories":[],"content":"几个月前就开始看MIT的这门课程：\r6.NULL: The Missing Semester of Your CS Education 。后来因为开始工作了比较忙，自己又懒，一直拖到昨天才把这门课看完。看完之后，赶紧抽空写了这篇小文章来介绍这门课程。实话实说，看了这门课程，我现在就是后悔，十分后悔：后悔自己没有早看到这门课程。我甚至认为这门课程非常适合作为多数学CS的同学的第二门CS课程，即在上了一门CS导论课程之后就学这门课程。下面斗胆简单介绍一下这门课程。\n首先，这是一门出发点颇为有趣的课程：其他的CS课程往往会介绍一些更为“高级”或“理论”的内容，例如操作系统、数据库原理、机器学习深度学习等等，然而却几乎没有课程介绍一些极为“实用”的知识，即如何使用一些好用（能大大提高生产力）的工具，如terminal、编辑器editor、tmux、profiler、数据处理工具(如awk, sed, grep, perl）等等。而作为学生，大家（至少我）要么是靠同学、师长、同事推荐听说到这些工具，然后靠网上一些质量未必很高的tutorial去自学；要么是靠缘分去碰到这些工具；有的时候运气好点，会自己调研到好用的工具并学习。但总而言之，因为缺乏这方面的“系统化”的教育，大家往往需要走很多弯路才会培养出一个比较完善的武器库。更重要的是，当武器库中缺少某种武器的时候，我们甚至会认为碰到的某个任务是无法完成的，而这个任务实际上可以用针对它的“恐龙克星”轻松搞定。而6.NULL这门课的作用，就是教你一些常用且好用的武器，让它们成为你武器库中的一部分。\n其次，这门课对各种工具的介绍相对简洁，并没有非常深入地介绍各个工具。具体地说，由于课程时间有限，课程上主要是告诉你这些工具是做什么的、能实现什么样的事情，并给了一些简单的使用示例，而如果你想要去深入地了解这些工具，课程的notes则提供了一些资料供你阅读。在我看来，这样的教学方式是十分合适的，能够在相对有限的课堂时间内尽量多地介绍一些有用的工具。而也许对很多人来说，对这些工具的使用场景有一个初步的印象就已经足够。这之后碰到需要用这些工具的问题时，之前留下的印象便能够让你反应过来“奥这里是不是用之前看到的xx工具就可以搞定啊”，然后去找寻工具的文档、教程来现学现用，这种learn by doing的学习效果往往也是最好的。当然了，课程同样提供了一些简单的习题来帮助你学习这些工具。\n再者，我非常认可几位instructor的观点：作为一位程序员，我们也许会花几百甚至几千小时在terminal、 editor等常用工具的使用上，因此花几个小时或者几十个小时去熟练掌握这些工具的使用是极其有价值的。如果你是一位刚开始CS学习历程不久的同学，那么我强烈建议你过一遍这门课程，这并不会需要很多时间（也许20、30个小时？）。而即便你已经有了一些CS方面的经验，我也强烈推荐扫一眼课程网站上的内容介绍，如果有哪块自己不是很熟悉的，可以快速地过一下，说不定就会有收获呢？\n最后，b站上也有搬运的课程视频，不需要科学上网也可以轻松观看，大家可以自行搜索~ 同时在这里也表达一下对Youtube自动生成字幕的强大的震惊，要不是有自动生成的字幕，我实在是听不懂某位instructor的英语Orz 深度学习真的很强大Orz\n","date":1589029736,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589029736,"objectID":"cc5560384985af710e3bc59ddd06e9c6","permalink":"https://conanhujinming.github.io/post/missing_semester/","publishdate":"2020-05-09T21:08:56+08:00","relpermalink":"/post/missing_semester/","section":"post","summary":"6.NULL课程观后感","tags":[],"title":"6.NULL：恨不相逢“未嫁时”","type":"post"},{"authors":[],"categories":[],"content":"What is This Course About? There are tons of good machine learning courses in the web. So why bother taking this course? The reason is that this course focuses on different parts from other courses. Specifically, this course is about the fundamental knowledge of machine learning; the insights of different algorithms; best practices in applications. On the other hand, we will not pay much attention to the theoretical part of machine learning; instead, we provide some resources such as links to other courses or chapters of textbooks for interested readers.\nTextbook There are books for interested readers.\n [PC] Pattern Classification (2nd Edition), by Richard O. Duda, Peter E. Hart, and David G. Stork, Wiley-Interscience, 2000. [PRML] Pattern Recognition and Machine Learning, by Christopher M. Bishop, Springer 2006. [ESLII] The Elements of Statistical Learning: Data Mining, Inference, and Prediction (2nd ed.), by T. Hastie, R. Tibshirani \u0026amp; J. Friedman, Springer 2009. [MLAPP] Machine Learning: A Probabilistic Perspective, by Kevin Murphy, The MIT Press, 2012. [DM] Data mining: concepts and techniques, by Jiawei Han, Jian Pei, and Micheline Kamber. Elsevier, 2011. [DL]Deep learning, by Goodfellow Ian, Yoshua Bengio, and Aaron Courville. MIT press, 2016. Supplementary readings will be available online.  Schedule    Week Time Topic Video Reading Lecturer     1 5/4 Mon. Course Overview \u0026amp; Introduction \rLec1 [PC] 1; [ESL] 1\u0026amp;2; [PRML] 1 Conan Hu   2 5/10 Sun. ML Problem Reframing \u0026amp; Generalization \u0026amp; Metrics \rLec2 \rGoogle Course Conan Hu   3 5/24 Sun. Bayesian Decision Rule \rLec3 \rDomingos\u0026rsquo;s excellent paper; [PC] 2 Conan Hu   4 5/31 Sun. Naive Bayes \u0026amp; Linear Regression Methods None [PC] 3 Conan Hu   5 6/21 Sun. Bias-Variance \u0026amp; Overfitting \rLec5 [ESL] 4.5.1, 12; [PRML] 4.1.7, 7 Conan Hu   6 9/11 Sun. Linear Classification Methods \rLec6 [ESL] 4.5.1, 12; [PRML] 4.1.7, 7 Conan Hu   7 11/22 Sun. kNN \u0026amp; Decision Tree \rLec7 [PC] 5.1~5.5 Conan Hu   8 12/13 Sun. Ensemble Methods: Bagging \u0026amp; Boosting \rLec8  Conan Hu   9 TBD Ensemble Methods: GBDT \u0026amp; XGBoost   Conan Hu   10 TBD Neural Networks \u0026amp; Deep Learning  \rCS231N Conan Hu   11 TBD Clustering \u0026amp; Dimension Reduction \u0026amp; Visualization   Conan Hu   12 TBD Frequent Pattern \u0026amp; ML in Practice   Conan Hu   13 TBD ML in Practice: Tools \u0026amp; Data \u0026amp; Feature Engineering  \rGoogle Course ML Advice Conan Hu    Where to Go? Here we list some recommended courses for deeply learning. Remember, if you want to gain a deep understanding, you should finish the assignments.\n\rCoursera Machine Learning: An introductory given by Andrew NG. We suggest starting from here.\nPick one from the following two:\n \rStanford CS229 Machine Learing: There are videos in Youtube and Bilibili (2018 version). \rCMU 10-701 Intro to ML：There are videos in Youtube (2016 version).  As the homework of the above three courses either based on MATLAB or do not cover much in coding part. Here we suggest the assignments of our course in Zhejiang University.\nFor the most popular deep learning, I recommend the following courses:\n\rStanford CS231n：Deep learning for CV. We suggest starting from here for deep learning.\n\rStanford CS224n：Deep learning for NLP.\n\rBerkeley CS285：Deep Reinforcement Learning.\nLast Word Welcome to give us any feedback or suggestion. We are eager to hear any of them. Also, welcome to suggest topics that you would like us to cover!\n","date":1587303411,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587303411,"objectID":"1b15239b5c69f2f3b0f9a887b613f61f","permalink":"https://conanhujinming.github.io/post/ml_in_practice_crash_course/","publishdate":"2020-04-19T21:36:51+08:00","relpermalink":"/post/ml_in_practice_crash_course/","section":"post","summary":"This is the website for the course Machine Learning in Practice Crash Course.","tags":[],"title":"Machine Learning in Practice Crash Course","type":"post"},{"authors":[],"categories":[],"content":"今天是硕士毕业的日子，长达接近二十年的求学生涯终于要暂时告一段落了。在疫情的影响下，这次的毕业没有任何毕业应该有的气息：没有笨拙的硕士服硕士帽，没有拍这拍那的毕业照，没有枯燥但又颇有意义的毕业典礼，也没有朋友们的依依惜别。本科毕业的时候，一位朋友告诉我说：“离别的时候要用力、再用力一点，因为再次相见往往比你想象中要长，这就是我们离别的意义。”当时我听了她的建议，很认真地与朋友们做了道别之后，踏上了回到杭州的火车，开启了一段新的旅程。然而这次的离别却来得出乎意料，大家都还没做好离别的准备，离别就这样在沉闷的疫情氛围下悄悄而至。原以为只是普通的相见竟成为了毕业前最后的匆匆一面，从此再难见到各自不戴口罩的面容。\n回顾自己的硕士生涯，可以说这是一段跌宕起伏、难以置信的旅程。在这期间我经历了许多颇有些匪夷所思的事情，回顾起来竟还有些不真实感。我经历了多次研究方向的转变，从本科的航天开始转成了CS，然后依次做了爬虫、SR、知识图谱、人脸识别、多标签分类、OCR和前端，而最后却又出乎很多人意料地选择了金融行业的系统开发。这样的多次转变，即使是我自己看来都觉得有些任性妄为。但是这或许就是年轻的好处：只要足够勇敢，年轻的时候总是有做选择的资本的。除了研究方向的变化以外，我也多次在research和工程之间来回切换，最后自然是一事无成。不过要谈起硕士阶段的收获，我想最大的收获应该有两点。第一，我自己的成长。这个成长不仅仅是CS技术本身的进步，还包括了自己学习的方法、思维的习惯、交流沟通的能力、解决问题的能力等，更包括了自己性格上的成长以及对自己人生追求的思考，我想这些成长毫无疑问会是自己一生中宝贵的财富。第二，认识到了许多志同道合的朋友和让我尊敬的师长。非常非常感谢我的导师蔡登老师多年来对我的支持与帮助、指导与栽培，无奈自己愚笨且懒惰，未能达到蔡老师水平的万一。也非常非常幸运地遇到诸多朋友，大家一直不嫌弃我的恶劣性格与糟糕的技术水平，在生活上和学业上都给了我巨大的帮助。可以说，当我回首硕士往事时，我认为我不因虚度年华而悔恨，也不因碌碌无为而羞愧。\n接下来就要开启一段全新的、甚至是比求学生涯更加长久的旅程。New adventures of Jinming! 想想就让人心潮澎湃。不知道这又会是怎样的一段旅程呢？\n光阴似流水，不一会，课毕放学归。问君此去几时来，来时莫徘徊。各位，少年强则国强。将来治国平天下，全靠吾辈。大家努力啊，同学们，明天再会。\n","date":1585568531,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585568531,"objectID":"a1f03181e0e6163d1766e4d17524ced7","permalink":"https://conanhujinming.github.io/post/master_graduate_thoughts/","publishdate":"2020-03-30T19:42:11+08:00","relpermalink":"/post/master_graduate_thoughts/","section":"post","summary":"剑在手，问天下谁是英雄","tags":[],"title":"硕士毕业感言","type":"post"},{"authors":[],"categories":[],"content":"大约在两个月前，一位朋友找我帮他的妹子写一段对机器学习不同水准的分级，并描述不同等级的人具有的特点。于是我就勉强瞎写了一通，发在这里。当时写的是英文版的，这里就懒得翻译了，直接贴过来了。\n \rSome Claim \rBasic Knowledge/Foundation of Machine Learning  \rLevel 1 \rLevel 2 \rLevel 3 \rLevel 4   \rEngineering of Machine Learning  \rLevel 1 \rLevel 2 \rLevel 3   \rResearch of Machine Learning  \rLevel 1 \rLevel 2 \rLevel 3 \rLevel 4 \rLevel 5 \rLevel 6 \rLevel 7    Some Claim Personally, I think it is not trivial to group people in machine learning area into different levels. Here I only try my best to give some rough levels.\nIn machine learning area, I think there are some different types of knowledge. Thus I would like to list these different type of knowledge and try to give levels corresponding to these different types of knowledge. Note that these levels are not necessarily designed/proposed for self-learner. For machine learning guys, there are roughly two types of career directions, i.e. engineering and research. The necessary techniques for these two directions can be very different from each other. Some may be very good at enginnering but know few about research and vice versa. Of course there are some experts who can be a master of both directions, but these people only take up a small proportion. Also I want to clarify that I do not want to list levels corresponding to very junior people. It is not necessary to do this.\nBasic Knowledge/Foundation of Machine Learning Level 1 They are familiar with frequently-used algorithms such as SVM, GBDT, DT, NN, and etc. They know the formulation of these algorithms. They can understand many parts of the proof and derivation of these algorithms, but they may not be able to derive these algorithms independently. They also may implement many algorithms themselves, but with the help from other code/other guys, and also with the skeleton code written by TA :) Typically they can get a score over B in a good machine learning course.\nLevel 2 They can understand many frequently-used algorithms. They are able to derive many of them independently. Also, they know the trade-off/advantages/disadvantages of these algorithms. They may be able to implement many algorithms independently (maybe with the help of books) with the skeleton code. They can get a score of A in a course.\nLevel 3 They can understand most of the frequently-used algorithms. They are able to dervice almost all of them independently. They are qualified to teach other people about these knowledge. They are able to implement most algorithms independently. They can be a strong TA or even lecturer for a good course.\nLevel 4 They are able to write very good textbooks.\nEngineering of Machine Learning Level 1 They have at least Level 1 basic knowledge of machine learning. They are able to write machine learning codes with many packages such as sklearn, xgboost, lightgbm, tensorflow, pytorch, and etc. However, they do not have a good understanding of features, applications, and when and why some models work and some do not. When the models do not work, they do not know how to debug it.\nLevel 2 They have at least Level 2 basic knowledge of machine learning. They have a good understanding of features, data, and the scenarios. They know how to develop a simple but fast solution for a problem (maybe leading some people), and also how to improve the current solution. When the models do not work, they know how to debug it, i.e. they are able to diagnose where the problems are in systematically. They are also able to estimate the time for developing machine learning solutions for a specific problem.\nLevel 3 They have at least Level 2 basic knowledge of machine learning. Usually, they can write very good codes. Moreover, they can lead hundreads of people to develop giant machine learning solutions for some very difficult problems.\nResearch of Machine Learning Level 1 Sadly, in the deep learning era, they do not even have to get an Level 1 basic knowledge of machine learning. They are able to write some rubbish papers, which may be published in some rubbish journals/conferences :( Their research is useless both for research and application. Their papers are confusing, and the ideas may even be copied from other papers.\nLevel 2 Sadly, in the deep learning era, they do not even have to get an Level 1 basic knowledge of machine learning. They are able to write incremental and sometimes not so incremental papers and may get them published in top conferences/journals. However, their research is usually useless both for reasearch and application, and the research is even irreproducible. The writing of their papers are not bad, though.\nLevel 3 They have at least Level 1 basic knowledge of machine learning. The ideas of their paper make sense. They are able to get their papers published in top conferences/journals frequently. However, their research is usually useless both for research and application, but the research is even reproducible. The writing of their papers are good.\nLevel 4 They have at least Level 2 basic knowledge of machine learning. Their papers are sometimes published as oral papers in the top conferences. Their research is sometimes useful both in research and application. Their papers may be cited frequently by the other authors.\nLevel 5 They can make impact and even influence the direction of the research. Their papers are frequently published as oral papers in top conferences, and even best papers sometimes. Many professors in top-tier universities are in this level.\nLevel 6 They can propose some paradigms that are very popular for a considerable time in their area. Some professors in top-tier universities are in this level.\nLevel 7 They are able to create some areas.\n","date":1585393957,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585393957,"objectID":"1a8cb6ffb12566a5304291d91763a525","permalink":"https://conanhujinming.github.io/post/level_of_machine_learning/","publishdate":"2020-03-28T19:12:37+08:00","relpermalink":"/post/level_of_machine_learning/","section":"post","summary":"受朋友之托，瞎写了一段对机器学习不同水准的人具有的特点的看法。","tags":[],"title":"机器学习分级","type":"post"},{"authors":[],"categories":[],"content":"这两天有同学和我一起讨论在写作中需要注意的事项，我们总结出了七个简单的写作法则。注意我们讨论的主要是议论文、科技文写作；而抒情记叙散文等可能会有不同的原则。我们将下面七个简单的法则概括为7C法则。\nConcrete and Concise 具体而简短有力 文章的内容要具体，文字要言之有物，不能泛泛而谈。这个内容指的不仅仅是文章的主旨，还包括每个段落，每个句子，甚至每个词。有同学举了一个很好的例子，例如\u0026quot;do the construction\u0026rdquo;，这里的do就是一个无意义的词，不如直接用动词\u0026quot;construct\u0026rdquo;。\n同样，写作的文字要简短有力，所有文字均为文章主旨服务，这与内容具体（以及下文提到的cohesion)往往是一致的。\nCohesion 内聚性 文章要有内聚性，即每个段落都是为文章主旨所服务的。段落要有内聚性，每个段落应该只有一个主旨，且一个段落的主旨往往在开头，即topic sentence，而之后的句子均要为此服务。每个句子也应该有内聚性，例如一个句子不应该讲述两件不同的事情，除非有意为之。\nCoherence 连贯 文章要有比较好的衔接性。譬如，每个段落之间应该有一定的逻辑衔接关系，而段落之中的句子也应该有衔接关系。当英文写作水平不够的时候，这种衔接往往可以用一些衔接词来加强、强调。\nConsistent 一致 文章的主题应该一致，譬如文章的内部不应该有完全相反的结论（除非本身就是survey或者review）。文章的正式性应该一致，譬如一篇文章应该通篇为正式文体(formal)，或者半正式(semi-formal)，或者非正式(informal)；所选用的词、表述方式等均应该与对应的正式性保持一致。除此以外，文章内对同一事物的提法也应该保持一致。\n在论文写作中，要注意论文的notation, evaluation, introduction等均应该与前人的工作保持很大程度上的一致性，不可自己随心所欲地写作。\nClear 清晰 写作应该清晰易懂。具体到日常的文章写作，就是要考虑到读者的背景，用读者能够理解的文字来说明事物；讲述事情的时候尽量不要有内容缺失、不要有逻辑上的断层等；段落句子之间注意衔接与层次感，并学会使用主题句(topic sentence)和总结句。具体到论文写作，还需要让论文的各个元素都出现在最应该出现的地方，而不应该让读者自己去猜测或费力寻找相关的元素；图表的说明文字(caption)应该要自我包含(self-contained)，即不需要看正文也能知道这个图表表达的意义等等。\nCritical 关键/批判 作为议论文/paper，应该对已有的观点、方法进行合理的批判性的讨论，并引出自己的观点/motivation。同时，这个观点/方法应该是具有一定意义的，而并不是完全无意义(trivial)的。尤其是科技论文paper的写作，如果缺少了批判性的讨论，那就很难说服读者(reviewer)这项研究是具有价值的。\nComplete 完整 写作应该具有完整性。作为日常的议论文写作，这是指文章应该较好地阐述写作背景以及完整地阐述自己的观点，并给予相应的支持。作为论文写作，完整性则是说这篇文章总体上应该self-contained，最好让大同行能够在不怎么需要去翻阅参考文献就能大概理解这篇文章的工作。另外，paper也应该完整地完成了abstract/introduction中声明(claim)的研究目标，也即给出了完整的对应于本文研究动机(motivation)的方法(approach)，以及有相对完整的实验评估与分析等等。因此，paper中也切忌overclaim，否则这篇paper就会因为未能完成自己的研究目标而变得不完整。（虽然现在非常多的paper都会overclaim，然后也可以中Orz）\n总结和英文写作书籍推荐 上面给出了我和几位同学一起讨论出的适用于议论文写作和科技论文写作的7条简单的法则。可以看到，这7条法则不是完全独立的，而常常是相辅相成的，这是因为它们的目的都是让文章的阅读者能够更轻松自然地读懂文章。另外需要指出的是，这远远不是一个完整的列表，也不一定是必须遵守的金规玉律，而仅仅是我们讨论出来的相对同样的指导法则(guideline)。也欢迎各位读者提出自己的观点，或者是补充这个列表。\n最后推荐一本关于英文写作的小书：\rThe Elements of Style。这本小书号称英文写作圣经，而且只有100页左右，很值得一读。不过作者的taste有些过于严格，各位也要因时制宜，因地制宜。另外写paper的话，在掌握了general的写作技能之后，还应该去模仿、研究优秀的paper的writing。\n同样很有名的英文写作的书还有\r《On Writing Well》，但因为我太懒了，一直没看，所以也不知道怎么样Orz\n","date":1583500232,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583500232,"objectID":"fe8cbb6c9babde574028d40421dd63f4","permalink":"https://conanhujinming.github.io/post/paper_writing/","publishdate":"2020-03-06T21:10:32+08:00","relpermalink":"/post/paper_writing/","section":"post","summary":"适用于议论文、科技文写作的七个法则：concrete and concise, cohesion, coherence, consistent, clear, critical, complete","tags":["写作","英文写作"],"title":"写作的7C法则","type":"post"},{"authors":[],"categories":[],"content":"写在20年初的校招面试心得与自学CS经验及找工作分享 我于大三（15年下旬）开始自学CS，并在去年（19年）参加了校招的实习与春招，很幸运地拿到了10来家公司的offer。在这里分享一下自己总结的面试心得与技巧、自学CS的方法与资料、自学CS的历程以及找工作的历程。当然，本人水平有限，且观点局限于个人经历，故有些说法难免会有不妥甚至不正确，欢迎指正。\n全文接近4万字，可以根据目录各取所需。\n \r面试心得  \r声明 \r编程部分心得  \r一个非常简单的例子 \r练习白板编程 \r问清题目 \r与面试官确认函数签名 \r设计简单的测试样例 \r与面试官确认思路 \r抓住面试官给的提示 \r确认边界处理 \r代码中使用可读性高的变量名和函数名 \r写代码过程中保持与面试官交流 \r写完代码后主动测试 \r主动给出算法的复杂度 \r讨论算法的trade-off   \r计算机基础部分心得  \r面经的使用 \r抓住面试官想问的点 \r说出自己的insight \r结合自己的使用经验阐述   \r项目部分心得  \r简要介绍项目背景 \r介绍项目的approach \r指出项目中的困难点和解决方案   \r论文部分心得  \r简要介绍自己research的背景 \r像做talk一样介绍一遍自己的论文   \r其他部分  \r把握提问的机会   \r模拟面试 \r面试大忌  \r不懂装懂 \r狂傲不羁 \r远远达不到面试官对自己的期望   \r心态 \r最后   \r番外篇：找工作的流水账与心路历程  \r背景介绍与CS学习历程  \r我总结的学习方式 \rCS学习历程   \r找工作之前的准备  \r刷题 \r面经与面试技巧 \r模拟面试 \r日常实习 \r做research   \r找实习  \rGoogle \r拼多多 \r摩根士丹利 \r头条 \r阿里 \r腾讯 \r微软 \rOptiver \r百度 \rAirbnb \rHulu   \r实习经历  \r入职 \r项目初期进展 \r进抢救室 \r恢复实习 \r总结   \r秋招  \r百度 \r腾讯WXG \r阿里 \rOptiver \r腾讯数据库内核 \rGoogle \rOffer选择   \r一些学习资料推荐  \r数学 \rCS导论 \rCS实用课程 \r数据结构与算法 \r操作系统 \r组成原理/体系结构 \r计算机网络 \r编程语言 \r软件工程 \r机器学习 \r深度学习   \r尾声    面试心得 2019年春招和秋招，我在中国进行了多场面试，其目的是找一个暑期实习职位和找秋招的正式工作。这是我的个人心得总结。\n我实习和秋招都已经面了数家国内的一线大厂（包括腾讯/阿里/头条/百度/拼多多等）和数家外企（包括Google/Microsoft/Hulu/Airbnb/Morgan Stanley等），收到过一次拒信。经过一段时间的面试准备与几次面试经历，总结出了一些个人心得，仅供参考。本文的前半段给出了一些我认为比较通用的技巧与心得，以供参考。本文的后半段介绍了自己跨专业学CS的一些经历以及自己找工作过程的流水账，并简单讲述了与找工作期间的心路历程，也可作为自学CS与择业的一个简单参考。\n声明 所有的面试技巧都是建立在一个基础之上：面试者已经具备了相对合格的实力。2018年下半年我在一家创业公司实习，秋招时也面试过一些候选人。在我看来，面试者如果自身基础不扎实、实力不够合格，那看所谓的面经、学习所谓的技巧也意义不大：合格的面试官可以非常轻易地通过一些follow-up问题问出面试者的真实实力。面试技巧和面经固然有意义，但学习技巧和了解面经，只能帮助有实力的面试者更大程度地发挥出自己的实力 。学习没有捷径可走，nothing replaces hard work. 希望每一位面试者都能尽早明白这个道理。\n另一方面，我身边确实有一些这样的同学：他们相当有实力，但是却因为种种原因无法在面试中展现出自己的全部实力。事实上，不同的企业有不同的面试文化，比如Google的面试官希望面试者能成为一个他愿意一起工作的同事，字节跳动的面试官也许希望面试者是一个数学、算法、coding、工程都不错的全面人才，这样的人才更可能成为一个“能解决问题的人”。但是，作为面试候选人，我们其实没必要去针对各家公司的文化对症下药：应对面试应当有一些共通的要点。在我看来，面试最关键的一点在于面试者要意识到这不仅是一场测试，更是一次需要充满着沟通与交流的谈话，让面试官认为他/她愿意成为你的同事，希望每一位面试者都能尽早明白这个道理。\n除了上面提到的我认为至关重要的两点以外，面试还有一些其他相对通用的面试技巧和要点。我这篇文章旨在总结一些这方面的东西，希望能够帮助到这样的同学。\n编程部分心得 在面试过程中，面试官常常会给出几道算法问题，需要面试者提供思路或写下代码。在大多数公司的面试中，这一部分的表现都非常重要，而对一些外企来说，这部分的表现是具有决定性的（甚至是唯一重要的表现）。对于这部分的准备，首推\rLeetCode等网站，这里不再赘述。再提几句话，对于一些重视算法问题的公司如Google, hulu, airbnb, 微软, 头条等，不要抱着可能撞到原题的心态去准备，很难撞到原题的，对于这些公司，你需要做的就是反复练习提升自己的能力，而且由于题目较难，需要有较多的训练量。而另一些不是很重视这类问题的公司像阿里、腾讯什么的，则刷一些常见的题目就很可能撞到原题了，而且难度一般不大。因此，根据target公司的不同，可以有不同的准备方式。下面将列举一些其他在面试中我认为比较关键的点。\n一个非常简单的例子 这里先给出一个非常简单的问题，下面的关键点将结合这个问题来阐述。该问题为，计算一棵二叉树的高度。 简单的实现如下：\nint getHeightOfBinaryTree(TreeNode* root) {\rif (!root) return 0;\rint left_height = getHeightOfBinaryTree(root-\u0026gt;left);\rint right_height = getHeightOfBinaryTree(root-\u0026gt;right);\rreturn max(left_height, right_height) + 1;\r}\r 练习白板编程 面试的编程部分往往是白板编程：面试官要么要求在一个类似于Google Doc的地方写代码，要么就是干脆在白纸上写代码。这种情况下coding的体验与平时使用IDE的体验是完全不同的。以Google Doc为例，许多人（比如我）一开始甚至很难写出能编译的代码，更别说一遍写出bug-free的代码了。同时，没了IDE，debug的难度也会大大增加。而在白纸上写代码的难度则还要更进一步。适应白板编程的方法也很简单，只需要足量的练习即可。\n问清题目 问清题目至关重要。如果你对面试官的编程问题理解得不清晰，那你应该立刻问一些能帮助你理解的问题。例如：数据范围是多少？这个数组的大小范围是多少？能不能给个样例？如果输入是这个，那输出应该是什么等等。在上面这个简单的问题中，可以问的一个问题是，二叉树的高度是什么（据我所知，高度的定义并非所有教材都一致）？\n许多面试官在面试的时候，会故意先抛出一个模糊的问题。实际上，他们希望面试者能够经过一些询问理解问题。在这个过程中，面试者能够展现出自己对问题的分析能力以及沟通的能力。前者的重要性参见编程珠玑第一章：明确问题，战役就成功了90%。后者的重要性在于，问清题目的这个交流过程与面试者入职之后与同事讨论问题的形式非常类似。显而易见，一个能够很难沟通的面试者也很难成为一个很好沟通的同事。\n如果没有问清题目，那会发生什么事情呢？在最坏情况下，面试者可能会花大量时间去解决一个完全错误的问题，面试结果也可想而知。或者运气好些，碰到了一个比较nice的面试官，给一些提示告诉面试者已经进入误区了，但这样不仅会浪费不少珍贵的面试时间，更会降低面试官对面试者的评价。我在面一家公司的时候，面试官给我出了一个题，这个题听上去比较困难，需要用到动态规划才能实现。我当时想，在面试开始阶段就给出一道比较困难的题，这对我来说也太不友好了！于是我询问了一句”数据的范围是什么呢？“面试官告诉我，数组的范围都是0-10的整数。这样的话，这个问题就变成了一个只需要6行代码就可以解决的贪心问题。如果我没有问清这个问题的话，面试的难度显然大大增加。\n与面试官确认函数签名 确认了题目之后，我认为合理的做法是先和面试官确认函数签名，也即输入是什么参数，输出是什么参数等等。这一步的代价很低，而且相当重要。第一，这可以告诉面试官，你对函数签名的设计相当重视，而这一点在实际应用中很有价值。第二，这可以进一步帮你确认自己理解了题意。一个合理的函数签名可能就类似于LeetCode题目里的函数签名。上面代码中的签名就是一个比较合理的签名。\n设计简单的测试样例 写完了函数签名之后，可以针对函数签名简单地设计一组测试样例（如果面试官之前给了样例的话，也可以直接用面试官给的样例作为测试样例）。设计测试样例地主要有三个目的：一是进一步帮助确认自己对题意的理解没有出偏差；二是告诉面试官自己对测试十分重视；三是提醒自己编码完成的时候测试自己的程序。\n与面试官确认思路 在自己有了一个思路之后，一定要和面试官确认这个思路是否合理。你可以给面试官解释你的思路为什么合理，面试官可能会和你讨论其中的一些要点。这样做有几点好处。第一，在解释的过程中，你的思路也会变得更加清晰（面试官充当小黄鸭）。第二，这也展现出你对沟通的重视性。第三，可能也是最重要的一点是，如果你的思路不正确，nice的面试官会提示你甚至直接指出错误所在，这样你至少不会在一个错误的思路上耽误太多时间。切忌有了思路之后，不与面试官交流直接写代码。尤其需要指出的是，如果你的思路对数据有什么假设，或者需要修改输入数据，那一定要和面试官确认这样的做法是合理的。\n如果你认为这个问题与某个经典的问题思路一致，或者可以用到某个经典的算法，那么就直接点出来。例如计算二叉树的高度，实际上是一个后序遍历，那么可以直接点出来。\n抓住面试官给的提示 有的时候一道题难度比较大，候选人一时想不到最优的思路，或者目前提出的思路是错误的，那合格的面试官可能会给一些提示帮助候选人思考，这时候候选人一定要抓住面试官给的提示。以上文给的例子为例，如果候选人想不到思路，那面试官可能会提示：“你觉得一棵树的高度与它的左右子树的高度可能有什么样的关系？”这就提示候选人可以用递归的方式来解决问题。抓住提示是很重要的：一方面，面试官给的提示很可能可以帮助你想到正确/最优的思路；另一方面，这其实也是双方能够进行不错的沟通的体现。\n确认边界处理 在开始写代码以前或者是写代码的过程中，一定要思考代码的边界条件。最典型的边界条件有：数据是否会溢出？指针是否可能为空？链表是不是可能存在环？数组的长度是不是零？输入的数据会不会完全不符合题意的要求？在示例中，边界条件就是当结点指针为空时，高度应该是0。当你察觉到边界条件存在时，就可以询问面试官处理方式，或者直接告诉面试官你认为什么样的处理方式是合理的。对边界条件的处理在开发软件时也异常重要。忽视了一个边界条件，就会对程序鲁棒性造成极大的影响，可能直接造成巨大经济损失甚至是人员伤亡。\n代码中使用可读性高的变量名和函数名 在写代码的时候，尽量使用可读性较高的函数名和变量名。例如，要计算二叉树的深度，函数签名可以为int getHeightOfBinaryTree(TreeNode* root)入参就叫root（而非node）。递归时，左子树的高度的变量名可以叫left_height 。诸如此类。这样操作的主要目的也是让面试官看到你良好的编码习惯。\n写代码过程中保持与面试官交流 实现算法的过程中，切忌闷头狂写而不与面试官交流。实际上，在写一些关键代码的时候，你完全可以告诉面试官你在实现什么功能。同样如前例计算二叉树深度，那你就可以告诉面试官，int left_height = getHeightOfBinaryTree(root-\u0026gt;left) 是在计算左子树的高度（良好的函数名和变量名其实也让这行代码不言自明），而int root_height= max(left_height, right_height) + 1 则是根据左子树和右子树的高度计算当前根节点的高度。\n当然了，在这个简单的示例中，交流或许显得不是那么重要，但是在一些复杂的问题中交流可能会非常重要。例如，示例的follow-up是请不用递归实现同样的功能，或者更进一步，请用常数空间实现同样的功能。在这样的问题中（代码可能长达数十行），交流就至关重要了。面试官需要和你交流来理解你的思路与状态，你同样需要交流来理清思路。这种写代码过程中的交流也是正式工作时非常重要的能力。当然了，这样的交流也不必过于频繁，否则也可能影响自己的编码状态。\n写完代码后主动测试 在你写完代码之后，不要急着告诉面试官你已经写完了。最好先手动跑一个/数个简单的样例。注意跑这个样例的过程要让面试官可以看见并轻易地理解，这常常是需要一些练习的。例如，我在Google Doc上跑样例的做法是，在屏幕上写出中间变量的当前取值，然后用鼠标光标告诉面试官现在程序跑到了哪一行代码，当前各个变量的取值是多少等等。主动测试的好处有很多。第一，这告诉面试官你很重视测试，而测试在实际生产中是非常非常重要的。第二，一个简单的样例常常可以找出不少类似于typo这样的小错误。第三，如果你的样例给得不错，那你甚至能够借助这个样例找到程序中的bug并纠正它，这总是要好过面试官发现并告诉你程序中存在着bug。主动测试时，你也可以确认你的程序可以很好地处理边界数据。\n我自己在面一家外企的时候，主动测试的习惯就给我带了很大的回报。当时我写了一段不算复杂的程序（约20行左右），可是因为情绪紧张，程序中包含了一个相对隐蔽的bug。写完之后，我习惯性地跑了一个简单的样例，这花了我大约3分钟的时间，但却让我注意到了那个bug。我赶紧修复了这个bug。到了面试的提问环节，我问面试官本场面试中我表现最好的一点是什么。他告诉我：”是你通过一个样例发现了你的bug。实际上，在你写出了那段代码的时候我就注意到了这个bug，当时我在犹豫要不要提醒你。而你随即开始了测试并找到了这个bug。“这场面试的结果是，在面试结束半小时左右我就收到了通过面试的消息。\n主动给出算法的复杂度 在写完代码之后，应当主动分析自己算法的时间与空间复杂度。一方面，这样可以展示自己扎实的算法基础。另一方面，这也可以告诉面试官自己有这方面的意识。当然了，如果复杂度分析的有误，那这个分析也可能会成为一个减分项。\n讨论算法的trade-off 有些时候，题目的解法可能存在一些trade-off。最常见的就是时间-空间的trade-off，当然有时也会有一些其他的trade-off。如果意识到了这道题目存在trade-off，那么可以主动地与面试官聊trade-off，让他/她知道你的思考过程与选择。\n计算机基础部分心得 面经的使用 计算机基础部分的内容包括数据结构、操作系统、编程语言、计算机网络等等。这部分的准备很大程度上是需要一些扎实的基础的，再配合一些面试公司的面经。有些同学想仅仅靠看面经就应付过去，我可以说大多数情况下是不太可能的。有经验和水平的面试官可以轻易地通过几个follow-up问题来判断出来这名候选者是不是靠面经回答出来前面的问题的。当然了，面经对于这块内容仍然是非常有价值的，但阅读面经的时候要注意，并不能仅仅看一下某道题目的答案就够了，而是要看这个题目考察的是哪一块的知识，这一块知识自己有没有遗忘的、生疏的、不扎实的，如果有的话要去做相应的准备。面经是告诉你这家公司面试的时候喜欢问哪些知识，而不是告诉你他们喜欢问哪些特定的问题，虽然有的时候有些高频问题确实可能在你的面试中出现。\n抓住面试官想问的点 有些同学被问到一些自己会的基础知识的时候会特别激动，想抓住这个机会表现自己，就会事无巨细地回答一波。我个人认为，如果是基础知识的话，其实不用回答得特别详细，说出一些面试官想问的关键要点就可以了。有时候不一定能判断出来面试官想问的要点，这也不要紧，就说一些自己认为是关键的要点，然后等着面试管继续问follow-up就可以了。这里举一个简单的例子，如果面试官问进程与线程的区别，那么简单地说线程是调度的最小单位，同一个进程的线程共享地址空间，容易有线程安全问题；进程是多数资源分配的最小单位，所以进程的地址空间都是独立的，资源安全问题相对较少。回答到这个份上就差不多够了，然后等面试官继续问follow-up，而不需要去解释为什么线程会有安全问题等。之所以建议这么做，是因为对于有些公司，面试时间是有限制的（例如Google, hulu等），所以面试时间是很宝贵的，你应该用这珍贵的时间去展示自己的优势，而不是说一些绝大部分人都懂的trivial的知识。当然了，有经验/不nice的面试官可能会打断你，问他自己感兴趣想问的东西，但如果你运气不好恰好面试官没啥经验或者不喜欢打断人，那这样浪费宝贵的时间是很可惜的。\n说出自己的insight 如果针对某个问题有自己一些独到的见解，或者是这个知识在很多教科书上可能看不到，很多同学也不一定知道，那么在回答问题的时候说出自己的这个insight，当然前提是自己的说法是有道理的。这里举一个简单的例子，比如一个面试问题是，可以用什么数据结构来实现队列。回答可以说是链表，接着可以补一句但是链表实现队列的性能不一定很好，因为链表节点的地址空间不是连续的，对cache不友好（小问题：那么如何改进这一点呢？）。这种知识其实是有一些经验的人或者基础扎实的人都知道的，不算是什么难点，但作为应届生，能直接说出这一点还是可能会让面试官觉得这个候选人基础不错。\n结合自己的使用经验阐述 如果在某些基础问题上自己有一些实际经验，那么可以结合自己的经验来回答，这样会让面试官觉得这个候选人不仅基础扎实、经验丰富，而且学以致用、分析问题的能力也挺强的。\n这里举一个简单的例子，比如面试官问hash table处理冲突有哪些常用的方式，各有什么优缺点。那么可以回答常用的有线性探测和拉链法两种。如果自己有相应的经验，那么就可以结合经验谈谈优缺点，例如线性探测在实际使用的时候常常需要空间开得比较大，hash table的装载因子需要维持一个一直比较小的状态（比如25%-50%这样），否则的话性能就会很差，因为查询和插入都会频繁地进行长距离的线性探测。而拉链法对空间的利用效率就会比较高。在提供足够的空间的时候，按经验线性探测会比拉链法快很多，比如之前做了个项目，在满足空间条件的时候线性探测会快7倍左右（这是在结合经验谈），原因是线性探测比拉链法对cache更友好（这是基础知识）。\n类似于这样的回答方式，可以让面试官留下一个很好的印象，认为这位候选人的整体素质也非常出色。\n项目部分心得 简要介绍项目背景 如果面试官是很熟悉这个领域、这类项目的人，那么你可以make some assumptions，即不需要做多少背景介绍。否则的话，还是建议简单谈一下自己项目的背景是什么。这是因为在不同的背景下，同一种功能的实现常常会有不同的选择。这样的背景介绍能帮助面试官更好地理解这个项目，以及大概理解一些实现的选择。背景主要包括场景、问题定义、需求、自己负责的部分扮演的角色等等。\n介绍项目的approach 介绍完项目背景后，需要简单介绍一下自己这个项目的解决方案。解决方案主要是使用了什么技术、什么工具、怎么样的实现等等。需要注意的是，介绍解决方案的时候最好要结合场景一起说，否则会缺乏一些说服力。\n这里仍然举个简单的例子。例如做深度学习的落地，深度学习框架选用的是腾讯的ncnn，那么最好说一下因为场景是嵌入式arm设备，且没有显卡，在这种场景下，ncnn做了很多指令级的优化，速度会更快。\n指出项目中的困难点和解决方案 针对项目中的困难点要特别认真地谈论一下，需要介绍为什么这个点是个困难点，解决方案大致是什么样的思路，为什么要这样去设计解决方案，最终达成了一个什么样的效果。如果一个候选人能展示出准确的痛点、瓶颈分析能力，并且能提出合理的解决方案的能力，那我相信面试官对他的评价会大大提升。\n这里同样举一个简单的例子。例如做数据库实现，项目中有一个问题是数据库太大，不可能放到内存里，但如果都放硬盘的话又太慢，这是项目中的一个困难点。解决困难点的关键是同时利用内存的速度优势与硬盘的容量优势，设计一个存储分层模型。做实验观察到90%的针对数据库的查询仅集中在10%的数据上。那么解决方案可以是设计一个冷热分离的模型，仅仅在内存中存储一些热（即查询频繁）的数据，而将冷（即查询频率很低）的数据存在硬盘上，同时设定一定的策略定期做冷热数据替换。经过这样的设计之后，数据库的查询速度提升了30倍。\n论文部分心得 简要介绍自己research的背景 与项目不同，很多冷门的research的背景面试官往往是不了解的，所以常常需要做相对详细一些的背景介绍。\n像做talk一样介绍一遍自己的论文 在面试之前，可以先自己精细地准备一下论文的介绍。假设这个面试官对这个领域不熟悉，如何才能让他在较短时间理解这个研究领域，大概明白领域的痛点，并理解你的论文的思路、解决方案与重要性呢？\n其他部分 把握提问的机会 大多数面试的最后一个环节，面试官都会问：“你有什么想问我的吗？”要抓住这个机会问一些问题：一些好的问题是可以让面试官印象非常深刻的；并且面试官很多是一家公司中比较厉害的员工，也是同行业同方向的资深从业者，问他们问题是有可能切实地学到一些东西的。而且由于这是面试的最后一个环节，会对印象分有比较大的加成。举一些算法岗方向的简单例子：\n 您觉得算法岗的从业者的核心竞争力是什么？（对行业现状与自己发展方向的关心） 您对我有什么建议吗？ （对自己发展方向的关心） 请问您的部门目前主要是在做什么方向的？ （对技术的好奇，对部门的关心） 那您在做xx项目的时候会不会遇到xx问题呢？您觉得解决这个问题的核心在哪里？ （这个问题对能力的要求就比较高了，如果能问出有价值的的话是非常强的加分项） 我在做算法的时候，有的时候效果不work，会有点不知道怎么去debug。您能分享一些您debug算法的经验吗？（展现出自己确实有一些这方面的经验，会思考自己做事的时候存在的问题并寻求改进措施，并且展现对知识、技术的热情） 请问您的部门在平时做算法方面的研究的时候，会用哪些方法来保证程序/算法的正确性？（对测试的重视，并且对实践中重要的东西有一定的认识）  模拟面试 强烈建议在面试之前找人模拟一下，并让对方给你一些反馈。这样能够大大降低紧张感，熟悉面试流程并提高面试表现。当然了，还有一个重要的方式就是多多投递，先拿一些自己不target的公司练练手，磨练自己的心态与面试技巧。\n面试大忌 我也曾当过几次面试官，也参加过一些面试并了解过其他人的面试情况，这里简单说几条面试大忌，一定要避免犯的错误。\n不懂装懂 对自己不懂的东西（甚至是没有十成把握的东西），一定要诚实地说出来，千万不要不懂装懂。我把这一点放在最前面，是因为我作为面试官以及平时与人讨论技术的时候，就非常讨厌别人不懂装懂。面试官的水平往往比你高很多，一下子就能判断出来你是真懂还是装懂。所以，碰到自己不懂或者没把握的问题，我建议直接告诉面试官说这个问题我没把握，不是很懂。但如果你有一些思路的话，可以接着说“虽然我不太懂，但是可以试着说一下”，这就可以变成一个展示你解决问题分析问题能力的机会了。而如果你的分析思路很合理，得出的结论也大差不差，那甚至可以很大程度地提升面试官对你的评价。\n狂傲不羁 面试的时候，人要有自信，但是态度一定要平和并且尊重面试官，切不可恃才傲物、狂傲不羁。有一些公司会非常看重这一点，如果你给面试官留下了不好沟通的印象，那往往是一票否决。但面试的时候，偶尔也会碰到面试官不是很懂犯错误的情况（比如国内的一些大厂），这个时候你最好是平和地去与面试官讨论，如果他坚持不肯认错，那你也不要去较真，否则的话可能你面试就挂了。有一种情况是可以去与面试官较真的，那就是你完全不在乎这家公司的offer，这时候你可以放开了较真哈哈哈。另一方面，当你面试一家公司或者一个组，碰到面试官不懂装懂又不肯认错的时候，你也得考虑一下这个组是不是值得你去。\n远远达不到面试官对自己的期望 在面试之前，面试官往往会根据候选人的Profile而对候选人心里有一个大致的期望值。在面试的时候，面试官会根据候选人的表现评分，而这个评分实际上有很大一部分是与对候选人的期望值有关。如果一个候选人的Profile很好、简历里吹得天花乱坠，那面试官对这位候选人的期望值就会很高；结果面试的时候一问细节三不知，远远达不到面试官对候选人的期望。在这种情况下，面试官往往会给一个非常差的评价。这种case或许比较极端，但候选人面试展示的水平（以阿里的的评级为例，假设是A）与自己的Profile（假设是A+甚至阿里星）不match是相对常见的现象。这时候，面试官甚至有可能给候选人一个比候选人真实水平还差的评价（譬如B+）。这也是候选人为什么要对自己简历上的东西了如指掌，能够做到即使被狂轰滥炸也能谈笑间应对的一个原因。其实上文所提到的，当面试的时候被问到自己不会或者不确定的问题的时候要先诚实地告诉面试官，之后再靠自己的common sense、逻辑思维以及其他的一些知识来推理出一个相对合理的答案。这也是一种对面试官的期望值的管理。先诚实地告诉面试官来降低他对自己的期望值（譬如降低为B+），然后再展现自己其他的能力超出这个期望值（譬如展现出A的水平），面试官说不定反而更容易appreciate你的表现。\n心态 面试总会有运气成分与偶然性，放平心态，不要因为害怕被拒就不敢投递，也不要因为患得患失而在面试的时候十分紧张。在面试中尽量让自己自然、轻松。当然，一些轻微地紧张有时是可以让自己发挥更好的，但是要适度，切不可紧张过头。面试中即使有些内容答得不好，也不要当场就心态崩盘，要沉着应付。当自己没有什么思路的时候也不要太慌，可以试着从基本的地方开始分析。例如做算法题，可以分析一些toy example，有时候能获得一些思路。回答CS基础题、system design等题目也可以从基础的地方开始分析，甚至是与面试官一起一步一步得出结果。我自己在参加一次面试的时候，一道算法题问清楚题目就花了10多分钟，然后10多分钟没有思路，同时面试官还在给我施加一定的压力。要知道面试总共就45分钟，这样的表现属于非常糟糕的了。所幸我当时稳住了心态，利用一个toy example得到了正确的思路，写出了bug-free的代码，最后还是让面试官相当满意。\n最后 需要说明的是，每个人都有自己的面试风格，很多面试官也会有自己的喜好，所以没有一套universal的面试方案。本文提到的一些技巧什么的，主要是我自己总结出来适用于自己的风格与方案，读者完全可以根据自己的实际情况与面试时候的感受来调整。举个例子，本文提到的编程部分心得，主要是针对Google这样的公司的算法题部分。我自己也有过一些面试经历，面试官非常不喜欢候选人在写代码的时候与他交流，甚至会在你写代码的时候自己去做别的事情 :( 这时候你最好就乖乖闭嘴，把代码写出来即可:) 因此，也希望各位因时制宜，因地制宜，结合实际情况来进行面试。最后祝大家都能有满意的offer~\n番外篇：找工作的流水账与心路历程 本文的这一部分将以流水账的形式简单讲讲学CS这几年来的一些经历，以及找工作的流水账与心路历程。\n背景介绍与CS学习历程 我总结的学习方式 在学习CS初期我走了很多弯路，相信了一些不合理（或至少是不适合我）的所谓“编程入门指南”。之后经过自己的摸索，到现在总结出了一套适合自己的学习方案。这里首先给出我的学习方案以供参考。使用这个学习方案还需要不错的英语水平，以后我有时间的话也许也会写一下自己学习英语的经验与心得。\n一个CS领域的学习过程大致可以分为以下三个阶段。当然，有的时候不同阶段是可以迭代地进行，例如开始科研之后发现自己还缺少了某些基础知识，那可以再进行基础知识的学习。同时，在学习中，很重要的一个指导思想是要获得监督信息与正反馈。三个阶段如下：\n  如果想学某门课程知识，那就找国外名校（主要是MIT/Stanford/CMU/Berkeley）有课程录像的对应课程，假装自己真的在上课一般地按照课程安排上课、看阅读材料并完成作业。完成作业是极其重要的，因为在这个过程中你会获得大量的监督信息，来指导你发现自己哪些地方学得不扎实；而如果仅仅看视频与阅读材料的话，常常会产生自己已经学懂了的错觉。另一方面，许多编程的作业完成之后也可以带来成就感与正反馈，支持着自己的学习动力。\n  之后，找自己感兴趣的领域。根据是做开发还是做算法，做研究还是做工程，第二阶段可以分成两种不同的方式。\na) 做工程：找一些适合练手的项目，自己实现与重构，并对照他人的实现方案。实际上如果第一阶段认真完成了好课程的作业的话，那么已经算是完成了很多练手的项目了。\nb) 做科研：了解这个领域的经典方法与最新方法，并复现这些方法，做实验比较结果，同时以论文的要求写报告分析结果，这个其实基本上就是国外很多课的project。复现好的论文是极其重要的，因为复现可以获得监督信息。在真正入门一个领域之前，人们常常会产生自己已经读懂了论文细节的错觉，实际上如果你没有能力复现一篇论文，你就不能说自己已经完全读懂了这篇论文。另外，论文中往往不会给出全部的细节，但这些细节并不trivial，需要你在复现论文的过程中自己发现体会。尤其是在系统相关的领域，论文中一句带过的设计细节往往也蕴含着insight，而这在你复现的时候会有更深的体会。另外，复现论文也能带来一些正反馈。复现完论文做实验的报告也是很重要的，这个整理的过程会逼迫你去进行一些更深层次的思考，整理的实验结果也可以供以后随时查阅。\n  同样，第三阶段也可以分成两种不同的方式。\na) 做工程：可以考虑在GitHub上找一些好的开源的项目，读源代码，并且帮助社区进行开发。有条件的话，可以去实习。\nb) 做科研：之后就是阅读论文、跟踪最新的成果、提出想法并撰写提交论文了。\n  需要指出的是，这套方案不一定适用于所有人，仅仅是我摸索出来的适合自己的方法。这里再多说一句，在整个学习的过程中，一定要多提出问题。例如刚开始阅读一些经典论文的时候，可以逼自己去提出5个与论文相关的问题，而且一定是那种自己提出来之前不知道答案的问题，再试着自己解答。中国人造词说学问学问，只有学没有问的话是一定不够的。\n这里再简单说一下如何找到合适的课程。我一般直接找MIT/Stanford/CMU/Berkeley（四大）的有视频的课程。MIT的课程很多在\rOCW有收录，可以在OCW里直接搜索。更常用的方式大概有两种，其一是在Google上搜学校名字+课程的名字找到课程主页，然后就可以跟这门课程了。例如想学操作系统，就搜MIT Operating System即可。第二种是在Youtube上搜学校名字+课程，很多有录像的课程可以这样搜到。除了这些名校的课程以外，很多MOOC的课程也是值得一看的。这里再简单给出我对各大院校/MOOC课程质量的评价：\n主要的MOOC平台有Coursera, Edx和Udacity。Coursera算是三大mooc平台做得比较成功的了，课很多，有好课也有一般的课，鱼龙混杂。课程类型偏学院风。Edx我以前看的时候是平均质量最高的，但那时候完全不商业化，课很少，学院风。Udacity课也不错，挺多的质量挺高，课程是工业风。MOOC的好处是针对自学的人有优化，但坏处是课程难度普遍较低，适合零基础入门的时候用。四大院校的真实课程的难度与质量往往会高好几个档次。其中MIT的课程质量在我看来是最高的，公开的课程也多。Berkeley的也不错，但是公开的课程相对少。CMU的课程质量也还可以。Stanford的课程的讲课质量感觉可能会低一些\u0026gt;_\u0026lt;，因为很多是PhD TA上课，感觉比很多经验丰富的Professor还是有一些差距。如果实在找不到有视频的课程资源，那也只好不看视频，直接看课件、reading材料和写作业了。这样往往吃力一些，效果差一些，但也能学到不少东西。\nCS学习历程 这段非常冗长，可以直接跳过。\n我是根不正苗不红的浙大CS小硕。高考填志愿的时候，突然有一些家国情怀，选择去西北工业大学航天学院学习航天，立志航天报国，也正是因此自己的计算机基础异常不扎实:( 本科的时候与CS相关的课程只有一门C++程序设计，自己学得也算是班上最认真的之一了，还刷了100来道POJ来巩固。当时任课老师劝我参加学校的ACM集训，我却中二地认为coding这种事情只不过是实现航天的工具而已，就没去参加，错过了一个亿。后来到了大三开始接触一些系里一些项目以及七七八八的事情的时候，我突然意识到他们做的航天项目和自己想的不太一样，航天系统里的人也与自己想得不太一样，遂萌生退意。\n于是开始自学CS。因为周围没有认识学CS的人，就去看知乎上大家的推荐，大家都推荐从SICP和CLRS入门，于是我就去看SICP和CLRS并努力做习题，而且当时太年轻，看的还是翻译版的。看到后面怀疑自己完全就是弱智，别人的入门书我怎么就学不懂呢\u0026hellip;其实有几个原因，一方面是这两门书挺难的，不见得适合入门；另一方面是翻译版翻译得也不是很好。可以说自己刚开始学CS的时候走了不少弯路。后来看到Coursera上有开Princeton的Algorithm课，就去把那个课跟了一遍，完成了习题。这时候才终于感觉原来自己还是能学会一些东西的:) 又把Edx上MIT的6.001x跟完了，还看了一些Harvard的CS50课程的内容，这时候终于感觉自己算是开始学CS了。\n那门课跟完之后，AlphaGO的事情开始刷屏。因为自己之前对围棋有些兴趣，也自学了一些，知道李世石是什么水准的棋手，于是就关注了AlphaGO与小李的比赛。本以为小李会轻松击败AlphaGO，没想到AlphaGO把小李吊锤了一通，很是震撼又让人感到excited，有一种看到世界的大幕缓缓拉开的感觉。也是在那时听到了人工智能(AI)这个词，觉得哇好高大上又有趣，就萌生了做AI方向的想法。\n然后就去找了《Artificial Intelligence: a Modern Approach》看。结果又是一本垃圾翻译书，国防科大的一些老师翻译的，我怀疑我用Google Translate都能比他们翻译得好\u0026hellip;后来我终于开窍了，买了本影印的英文版看。这本书写得挺有意思的，容易读懂又不失深度，就是太厚了有1000多页，读了我很久，读到后面晕乎乎的。当时看了最有印象的几段有：启发式搜索A*，书上我记得还将围棋归在这一类，说AI围棋距离人类职业水平仍有较大距离，短时间内很难得到人类顶尖水平:) ；用一阶逻辑从数据与规则中学习新的规则（也就是规则学习），当看到这样的程序证明了许多数学定理，有的证明甚至比原始证明更优雅的时候尤其激动与兴奋，不过后来真的开始学AI/ML之后发现这已经完全是个dead area；机器人使用强化学习来学习走迷宫和闯关游戏；用MM做NLP，HMM来做POS Tagging等等。不过要说明的是，这本书以现在的眼光来看已经有些过时了，而且里面大部分的内容与现在的研究、应用领域关系不大，不是特别建议阅读了。\n看完那本书后，调研发现大家都在做机器学习(ML)，就开始自学一些ML的知识。大三的暑假先从Coursera上Andrew NG课程入门，这门课是一门挺不错的课，我跟完并完成了习题，学习的过程中觉得ML真有趣又有用。然后开始读一些相关的书，先看了Tom Mitchell的那本《机器学习》，这也是一本挺不错的教材（虽然我又看的翻译版，晕乎乎的），不过也有些过时了。看完之后注意到周志华老师有本新出的《机器学习》，还有本出名的书是李航的《统计学习方法》，我就去买了这两本看，不过也只是很快地扫了一遍 。周志华老师的书写得还是挺认真的；李航的书的话我觉得太干了，不适合用来学习，适合用来复习。草草过了一遍两本书之后，又看了张学工老师的《模式识别》，不过后来发现这本书的内容与《Pattern Classification》非常接近，还是推荐直接去看PC。之后开始看《Elements of Statistical Learning》 （ESL）。但是ESL对当时的我来说有点太难了，很多都看不懂。而且我发现自己线性代数的基础似乎不够扎实，就先学了MIT的18.06，再继续去看ESL。值得一提的是，MIT的18.06是一门非常好的课，很适合作为对自己线代知识的拨乱反正，消除一些国内垃圾教材带来的坏毛病。学完之后继续看ESL，胡乱看到unsupervised learning之后，开始写research proposal申请日本的大学。\n这里要说一下，我之前一直比较向往能出国学习，但是美国的master实在太贵了，家里没钱上不起，CS PhD我又不可能申得上，我就转而准备申请日本的学校。日本的学校学费很便宜，一年也就2w人民币左右，东京的话生活费一年在8w左右，但是日本的master很多能申请到奖学金，至不济也能打工赚钱。我本来想走他们的G30计划，这是一个不需要日语成绩只需要英语成绩，并提供全奖的项目，结果那个项目那年因为日本扩充军费而没有资金了\u0026hellip;\u0026hellip;为此我还自学了一段时间的日语去考了N1，也考了托福(110)。日本的教授在申请中往往具有绝对的权力，说要你就要你，所以陶瓷在申请日本的大学中极为重要。陶瓷的方式往往是写一个研究计划书，发给教授，教授会判断你的基础、能力、vision等等。总之，我在大三的暑假学了一些机器学习知识之后就开始写research proposal了，当时还不懂深度学习，写的是半监督学习，主要是对以前的半监督学习（self-training, co-training那套）的工作的简要介绍，并写了一些自己浅陋的看法。现在看来，那时候的水平自然是非常差劲，对机器学习并没有形成一个整体的认识，也没有自己的insight；research上完全没有上路，对领域未来发展的看法自然也是错漏百出，不值一提。暑假结束之后，9月初的时候调研了很久教授的信息，看了一些他们最近的工作，并找了三个不同大学的教授发了套磁信。不过非常幸运的是三个教授都给了比较积极的回复，进行了一些交流后，其中两个教授直接表示愿意提供funding :) 我想我当时吸引到他们的可能是本科还可以的GPA，以及出色的语言成绩？\n这时候家里出了一些变故，然后我的姐姐也告诉我说自己想出国的想法给父母造成了很大的压力和负担。经过了一晚上的仔细思考，我决定放弃出国准备考研浙大，主要原因是浙大离家比较近，照顾家里的事情也会方便一些。但是我不确定自己能不能考得上研，毕竟准备时间很短只有3个月左右，我也没有什么CS基础。第二天起床之后，我借了同学的考研真题做了一下前一年（2016）的数学卷和英语卷，数学的话卷面大概120分左右吧，英语的话除掉作文翻译大概是扣了5分左右。当时就感觉3个月左右就努力突击专业课，应该有机会考上。遂写了邮件告诉日本的教授们自己因为一些原因不打算去了，并买了一些考研的书开始准备考研。\n准备考研的过程是漫长且枯燥乏味的。除了中间有5天回老家参加姐姐的婚礼以外，我每天都能保证9-10小时左右的有效学习时间。我的时间分配策略很简单：大部分时间（也许70%-80%）都投入到专业课的学习上，花一些时间在政治上，数学则定期做一套真题，而英语则一点时间都不花。总得来说这个策略是合理的，当时的失误之处在于学习专业课的资料选择问题。我觉得需要针对考试准备，就使用了国内的教材进行学习，事实证明这个选择是非常错误的，我不仅学得很吃力，最后专业课考得也很低，而且计算机基础也不是很扎实，后面还是花了大量的时间用四大的课程去补。总之呢，就这样日复一日地学习与上课。值得一提的是，我们专业大四上仍然有很多会点名的专业课:) 我在课上就一直看政治的内容，也因此有些课分数考得很低，让我本科的GPA最终变得很难看。终于，考研的日子到来了，我并不很紧张地上了考场，发现我考位左右两个考计算机的同学都弃考了。考场上觉得专业课是真的难，其他的科目都普普通通。按部就班地考完之后，就开始了漫长的等待成绩的生活。在等待成绩期间，我开始刷浙大的PAT，即考研的上机考试，主要是按照胡凡学长的《算法笔记》刷。一开始我还不是特别认真，一天大概只做两三个小时的机试题吧，剩下的时间去学一些其他的东西，例如Stanford的CS229。后来考研成绩出来了，我发现自己的初试成绩排名不靠前，这样如果机试考得很低的话就有可能考不上研了。为了让自己的机试成绩尽量高，我把每天刷题的时间提高到了8-10小时左右，这个状态维持了一个月左右，把历年PAT题目（大概100多道？）来来回回刷了两三遍，这才有了一定的信心。机试的考试来临了，我在西安交通大学的考场参加考试，考场里总共也就10来个人。题目非常简单，应该是历年最简单的一次。我顺利地秒完所有的题目之后，就交卷出场了。\n之后就是准备考研面试与找导师了。我并没有认识在浙大计算机学院的同学，只能在网上搜一些相关资料并咨询一些前几年考研的学长学姐，按照他们的推荐联系了几名老师。当时联系的老师们基本都给了回复，约我前去实验室面试。我有一些机器学习的基础，除了本科不是CS这一个致命伤以外其他的条件也不算很差，所以也收获了一些offer。同一个时间，考研的复试面试也来了，我并不紧张地参加完了学院的面试，并取得了大概是前三的面试成绩吧。最后经过一些时间的考虑，参考学长学姐的意见和网上的一些帖子选择了一个实验室的老师。\n选导师结束之后我回到了本科学校，开始做毕设，毕设课题是在一个叫NAO的机器人上做一些与机器学习相关的事情。因为选择的实验室看上去似乎与数据库相关，我就找了Stanford的CS145课程（没有课程录像）的课件看了一下。这门课程的学习经历让我意识到课程的录像是非常重要的，在此之后我找课程学习的时候一定优先挑选有课程录像的课。学了点数据库之后，我补了点概率论的知识（Harvard Stat110），然后开始学习Stanford的CS231n课程。这门课让我首次接触到deep learning，感受到计算机视觉CV（学习）的有趣之处以及deep learning的强大与玄学。我比较认真地看完了视频并做完了课程作业之后，决定毕设做一个机器人上简单的目标检测（object detection)。内容设定为机器人通过手眼相机检测到目标之后，根据目标位置抓取目标。由于当时根本没有显卡，只有一台i3的小破笔记本，我挑选了YOLO v2 tiny作为检测的骨干网络，并且使用了Github上的一个基于TensorFlow的YOLO项目。显然我的计算资源不支持我从头训练网络，我只能找了一个pretrain的网络finetune。当时那个YOLO项目还不支持finetune，我就自己看TensorFlow的文档瞎改代码，改出了个支持finetune的版本。然后自己收集了一些图片，标注了一些数据之后开始finetune。由于机器太差，区区百来张图片的finetune就让我费劲了力气：单组参数的finetune大约需要48h才能完成训练，而且训练过程中电脑会非常卡。我大概花了两周的时间才终于训出了一个勉强可用的网络。在此期间由于电脑不能用，我买了本《Information Theory, Inference, and Learning》开始看，也做一些里面能用笔算的习题。训完了网络之后，我在机器人做了一些实验，并录了一些demo，然后写完了毕业论文。暑假学车，利用空余的时间学了几门课，记得有Stanford的CS41 Python Language，还有MIT的6.006 Intro to Algorithms。\n需要说明的是 ，直到这个阶段，我对学习/CS/机器学习/做研究都还没真正的入门。现在回忆起来已经有点模糊了，但我大致记得当时的学习并不“主动”，纯粹是“被动”地理解书上写的内容、公式推导和代码等等。现在我认为真正的学习应该是非常“主动”地去进行，看书、论文的时候要对框架和motivation有一个清晰的把握，知道/理解算法这样设计的目的是什么，并要相对频繁地去ask some questions，批判地进行阅读与消化。但可惜当时的自己还差得很远。另一方面，自己习题、coding做得太少，没有获得足够的监督信息，自以为自己学懂了，但其实只学了点皮毛。好在那时候还算是通过一些课程的作业获得了很多正反馈，支持着我的学习热情。\n我一开始对能够进入浙大计算机学院是很有一些激动的心情的，也破天荒地去积极认识了很多同学，还认真制定了课程计划等等。但开学之后，我发现研究生的课程质量比我想象中差了很多。好在\r蔡登老师的\r机器学习课程让我感觉非常好，我认为蔡老师的授课水平和这门课的作业都是world-class的。可惜我运气不好，没能选上这门课，而且蔡老师怕TA压力太大，不给增加课程容量。我一开始就只能蹭课听，坐在最前面，学得很认真，课上蔡老师的问题也总是积极地第一个回答，最后竟然让蔡老师破例地为我签了条子，选上了这门课:) 托这门课的福，我的机器学习基础扎实了很多，这门课也取得了不错的成绩。值得一提的是，这件事情也成了后来我成为蔡老师学生的契机。我还担任了这门课接下来的三任TA，在此期间我与另一位TA一起将之前的MATLAB作业改写成了Python的作业。后来这门课要扩充一倍的新内容，我还与蔡老师一起设计了新的课程内容，并狗尾续貂地再出了四份对应新内容的作业。只做了这么一点微小的工作，非常惭愧。\n其他还有两门课给自己留下了一些印象。一门是潘纲老师与章国锋老师合上的《计算机视觉》。课程project我做的是preserve information in style transfer，大概就是说image style transfer中会丢失很多信息，于是就引入了一些正则项来保留部分原始图片中一些可能有用的信息。这个project是与室友一起做的，一开始做得很挣扎，主要原因是自己的Laptop上transfer一张图片就要一个晚上，所以做实验非常缓慢。后来得知实验室有一张1080Ti，就与实验室同学轮流使用。这也是我第一次亲眼见识到显卡的强大：竟然能在几分钟内就完成一张图片的style transfer，太强了！后来课程做pre的时候，两位老师建议我们可以把工作整理一下投一篇paper，但我俩觉得肯定中不了好的会议，就没去写。第二门课是钱徽老师的《凸优化引论》，这门课印象深刻的主要是教材：Nesterov 的《Introductory Lectures on Convex Optimization》。这本“Introductory\u0026quot;的教材让我久违地感受到了被支配的恐惧，里面各种反（我的）直觉的推导看得我头大，也没有任何motivation说明，而是那种苏联式教材的典型风格：就是硬推。钱徽老师说这本学懂之后，看paper会比较轻松。我抱着对他的信任一顿硬啃，后来竟然渐渐学懂了一点。课程作业是挑几篇paper看，我挑了几篇Zeyuan Zhu的paper看，发现竟然还真能比较轻松地看懂\u0026gt;_\u0026lt; paper大概是说SGD对数据梯度的估计会有一些variance，这些variance在训练后期会导致训练的不稳定，并推导了一些方法降低variance，感觉也挺有意思的。不过后来自己还是因为数理基础不扎实，没敢继续做理论方向。\n后来开始接触了一些自己实验室的项目之后，感觉不是很感兴趣，就与实验室下另一个组的一位同学cc一起合作搞一些超分辨率(SR)相关的工作，经常跑到他那边去合作。后来我和那边的老师商量，想换到那边的组去。我想大家都是一个实验室名下的，应该可以成功。那边的导师去找我原来的导师聊，结果失败了。我原来的导师也很不高兴我去自己实验室的频率太低，把我训斥了一顿。后来我只能放弃与那个组的合作，在自己组里认真干活。但最终因为方向不感兴趣、缺少显卡等原因，我选择了转出原来的实验室，这里也非常感谢原导师对我意愿的理解与尊重。后来很幸运地，蔡登老师愿意接收我作为他的学生，也许是认为我在他的课上表现还可以吧哈哈。\n我在实习之前的学习经历就到此为止。前期因为没人指导，自己也没有很好地判断力，很愚蠢地相信了很多知乎上的答案，后来才慢慢有点上路了，总结出了一些适合自己的学习方案。这个学习方案在前问已经给出来了，此处不再赘述。\n最后在这里小小地宣传一下我们组。组里的蔡登老师与何晓飞老师都是学术顶尖、人品很好的老师。何晓飞老师现在创业做无人驾驶了，我与他接触不多；但我与蔡老师交流很多，有一起讨论review过大概几十篇paper吧。蔡老师学术水平极高，读博期间就发表过非常多很有影响力的论文（虽然现在那些topic已经不是很热门了），也经常能一眼看出组里同学许久也看不出来的问题要点；有很好的学术准则，绝对不会抢夺学生的成果，也坚决不参与学术圈一些拉帮结派的事情；人品非常好，很为学生考虑，对我的请求从来都是有求必应\u0026gt;_\u0026lt;；还是一位很照顾家庭的好男人和好父亲。总之，蔡老师不仅是我的学术导师，更是我的人生榜样；在我眼中他是一位真正的计算机科学家，也是一位脱离了低级趣味的高尚老师。能成为他的学生是我的幸运。组里的同学们也都基础扎实，且很努力，产出也不少。组里2019年大概有发了15篇左右的CCF A类的paper，学术实力有目共睹，且蔡老师要求组里每篇发表的paper原则上都要公开代码在组里的Github账号\rzjulearning下，并开放issue欢迎随时challenge，这也说明组里的工作至少都是扎实可复现的工作。\n找工作之前的准备 刷题 我在找实习和找工作之前刷了一些LeetCode题目以做准备。找实习之前大约是刷了400道左右，到找工作之前大约是刷了700多道，具体可以移步\r我的知乎回答。不过由于我不是竞赛背景出身，不够有天赋，刷题也不是全都认真地独立完成而常常参考discussion，我直到最后也没能达到可以轻松做出绝大多数hard题目的水平（周围的很多朋友都可以轻松秒杀），这也给我面试一些对算法题要求很高的公司（例如hulu等）带来了一些不确定性。\n面经与面试技巧 我面经倒是看得不多，基本上只有看过Google和Optiver的面经。原因是我运气比较好，在找实习初期（2月底3月初）就拿到了实习dream offer Google，而在秋招初期（9月初）就拿到了秋招dream offer Optiver，游戏开局就爆了神器；所以之后的面试都比较无所谓，主要是抱着聊天的心态参加面试的。至于面试技巧，主要是根据自己的经历总结出来的。当时并没有找到这样的文章供我参考\u0026gt;_\u0026lt;\n模拟面试 找实习之前幸运地获得了Google官方提供的模拟面试(mock)机会，通过mock直观地感受到了Google面试的形式与风格等，对后面拿到Google的实习offer有很大的帮助。后来在Google的实习的时候，公司很贴心地给每个实习生都安排了四次mock，这四次mock也让我学到了很多东西。除此以外就没有进行过mock了 \u0026gt;_\u0026lt;\n日常实习 加入蔡老师的组之后，我一开始是在何老师的无人驾驶公司飞步实习。实习期间受宠若惊地担任了不少重任，例如一开始独自一人地做一个产品的某个算法模块（包括数据采集（与标注）、算法选型、模型训练调整、开发代码、测试、部署等）。值得一提的是，为了降低自己标注数据的负担（大概标了几万张分类图片），也自己想了一些合适的采集数据的方式，并设计了一些半自动标注的算法，大概能够降低95%的工作量吧；又开发了一些简单的标注工具，才终于让我survive the labeling task。后来还担任了某个产品的开发主力（甚至很多时候是唯一开发人员\u0026gt;_\u0026lt;），同样担任了数据收集、算法选型、模型训练调整、开发代码、测试、部署等等。在这段为期5个月的实习中我学/锻炼了非常多的能力，为我后面找工作也奠定了一些基础。\n不过实习期间，我发现自己应用机器学习的水平并不很好：我虽然了解大多数常用的算法的原理，但当deep learning模型不work的时候我往往会不知从何下手debug。尤其是做第一个项目的时候，模型在测试集上能够达到很好的精度，但算法上线之后效果很差，会有很高的虚警率。我当然知道这是因为自己收集的训练集与测试集过于单一，均无法很好地代表线上场景，但当时确实不具备收集更完善的数据集的条件。无奈之下，只能选择利用类似迁移学习的方式从一些有一定相似性的数据集中学习一些信息，效果虽有提升但仍然很差。后来尝试调参数、模型，但都没什么效果（我也知道不可能有效果\u0026gt;_\u0026lt;，你永远不可能解决数据上的问题，调参只是为了给leader一个交待）。最后为了用户体验，只能从阈值与告警策略着手，调整了很久的阈值与告警策略，并做了尝试自适应的阈值、bad case的判断与特殊优化等等。做第二个项目的时候，模型的训练倒是相对顺利，因为是已经相对成熟的应用领域了，倒是大部分的工作是写文档开发测试部署等等。总之，经过这段时间的实习，我发现自己其实不太喜欢收集数据、标注数据、调参调阈值调模型这样的工作，更重要的是我很惶恐于那种我不知道这个deep model为什么不work，不知道从何入手debug的感觉；也惶恐于不知道这个deep model怎么就work了，到底是因为什么而work的感觉。与之形成对比的是，我发现自己做开发的工作感觉还挺有意思的。这也是我第一次萌生转行做开发的念头。\n印象比较深的还有将算法deploy到塞林斯的板子上的时候碰到的两个bug。我是组里最晚往板子上deploy算法的人，所以被leader催得比较厉害。deploy完，我测了一下算法的结果是否正确，结果发现结果是完全错的，就开始了debug。leader催我在两天内搞定，我能力不足，只能加班来弥补。第一天debug的晚上发现应该是塞林斯官方的交叉编译器的浮点运算有bug，就汇报给了leader，leader不相信。后来另一位围观的小伙伴帮忙弄了一个minimal复现的程序(记得是sin(pi/2)=0.08之类的)，才终于说服了leader。最后我们给塞林斯官方写了邮件，官方回复承认了bug的存在，并说一时半会儿解决不了。然后小伙伴Z找了个开源的交叉编译器解决了问题。这个bug告诉了我一个道理：要勇于challenge，有的时候编译器真的会有bug。但是浮点运算正确之后，程序的结果还是不对。第二天又debug到晚上1点多，发现bug是OpenCV版本带来的问题。具体地说，服务器上当时的OpenCV是2.4.9，而deploy环境的OpenCV是2.4.8。我在2.4.9版本里使用了一个操作似乎是scalar times matrix，这个操作在2.4.9里能给出正确结果，然而2.4.8的OpenCV只支持matrix times scalar（不确定，有可能把这两个记反了，总之是2.4.8只支持一个顺序，而我的代码在2.4.9里开发的，写的是另一个顺序）。更过分的是，OpenCV的2.4.8还重载了scalar times matrix这个操作，然后返回了一个错误的结果（似乎是直接return 零矩阵）。最后还是小伙伴Z过来帮我用gdb一步一步看汇编代码发现的。Z把我们一顿喷：“为什么不用最新的版本？小版本的更新说明之前的版本一定是有bug的！”然而我早就提议用更新的版本了\u0026gt;_\u0026lt; 这个bug告诉我一个道理：广泛使用的库中也可能一些很弱智的bug，一定要用最新版的。（实际上我碰到了OpenCV 2.4.x版本的很多bug）\n在飞步实习期间要特别感谢我的实验室同学Z。Z是我身边技术最强的朋友之一，无论是技术深度还是广度都是我生平罕见得强大。Z虽然并没有在公司实习，但在我实习期间他偶尔会来公司carry我一把。Z给我的帮助非常非常大，例如帮我一起解决了那个编译器的bug，带我一起完成了第二个项目的系统方案设计等等。后来Z也选择吃了我的安利，与我一起加入Optiver，成为浙大第三个应届拿到Optiver offer的人\u0026gt;_\u0026lt;\n这里再说一句题外话。我在实习期间因为要用C++，但自己以前用的基本上都是C++中的C，所以又找了些资料学了一些C++。特别推荐一个C++的学习资料，\rStanford的C++课程CS106L的Course Reader。这本书讲的C++虽然有些过时，主要是C++11之前的一些东西，但仍然能够从里面学到非常多重要的C++思想（如封装、继承、抽象、多态、const的重要性等等）。对我来说，C++是一门不容易学好的语言，许多人推荐的C++ Primer和C++ Primer Plus会将我淹没在语法细节的海洋中。但是这本Course Reader不一样，作者会从很多motivation/design的角度来讲述C++，并给出了很多motivation example，况且作者的写作水平也很好，写得很有趣\u0026gt;_\u0026lt; 如果你和我一样没什么学C++的天赋，发现其他的书学起来很困难，那么不妨试试这本。稍稍遗憾的是，这本书自10年之后就没有更新了。\n最后总结一下，在这段实习让我学到了挺多东西的，对我后面找实习和工作都起到了很大的帮助。我之前从来没有在公司待过，更别说做工程产品什么的了，这次实习让我体会了一把工业界的感觉。刚开始写产品开发代码的时候是诚惶诚恐的，就我这垃圾代码也能当产品？做个demo还差不多。但后来也算是适应了这种惶恐的心理。另一方面，我一开始是独立负责产品线上一个大的算法模块的所有内容，后来有一段时间更是几乎独立开发了一个产品，因此对于算法工程师所必须的一些能力有了比较好的锻炼。第二个项目的产品最后还成功交付出去了，成为了公司的（第？）一笔营收，甚至听说现在那块业务还成为了公司的一项重要业务。\n做research 交付了第二个项目之后，我开始想做一些research，就选择回了实验室专心做research。这里主要有两个原因：其一是我想体验一下做research的生活，来帮助决定以后是否读博走学术道路；其二是听说算法岗的job market现在已经是神仙打架，甚至知乎上有人说“没有顶会paper可能就直接表刷了”。当然，根据我后来自己找工作的经验，我觉得这种话纯粹是危言耸听的。就我的经历而言，大家会更看重coding的能力、基础是否扎实、是否具有解决问题的能力以及是否具有不错的沟通能力等等。相比较而言，在job market上，顶会paper很多时候只是能justify个人能力而已，况且以现在ML会议的现状而言，能不能（短时间内）中也是挺看运气的。如果真的有某家公司招硕士算法岗要用顶会paper来表刷人，那我觉得可以考虑一下这家公司是不是真的值得投递了。\n这里再简单讲讲我做research的一些经历。需要说明的是，我做research的能力并不强，也没什么拿得出手的成果，所以仅供参考。最早想做research的时候是本科，那时候非常中二，希望自己能花多年时间在一个领域上，以达到专家的水平，甚至能推动领域的进步。在学了CS231n的课程之后就开始思考做research的idea，主要的想法是找一些目前还没应用deep learning但可能可以应用的领域。硕士入学期间（2017年5月-9月）总共想了三四个idea，现在看来回顾起来还是有一些有趣的。第一个idea是想用deep RL来做启发式搜索的评估函数，不过这个没有设备支持只能放弃。后来看paper感觉AlphaGo Zero的思路与这个有些类似。第二个idea是在学6.006的课的hash部分时候想到的。Prof说hash function往往是一个比较complex的function，我就想那能不能用deep learning来做hash呢？但自己闭门造车，一直想不到合适的监督信息，就放弃了。过了一年才知道有个领域叫deep hash，是用deep learning来代替LSH中的hash function，来做近似最近邻检索的，而早在16年就已经有deep hash的paper了。第三个idea可能是我最接近能做出来的一个idea了。当时的idea是想用神经网络来近似B-tree。我做了一些实验，感觉效果不错，但是一直困扰在一个点上：神经网络的输出的上下限是不确定的，万一query的数据的输出超出了训练时候的上下限的话就不知道怎么处理了。后来2017年12月的时候看到Jeff Dean发了一篇paper《The Case for Learned Index Structures》，我看了之后，发现他们的assumption是query的数据都在train中出现过，这样就不会出现上下限的不确定性问题了。而如果要去update这个神经网络模拟的B-tree，他们就选择重新训练整个模型。应该说他们的想法是更加合理的，因为直到现在似乎也没有人做出不需要retrain的learned B-tree。当时看到这篇paper的时候我非常激动，觉得有人和自己想到一块去了，而且还是一位大牛，这说明了自己的idea还是有一定靠谱性的。于是我还很兴奋地在数据库的课上分享了这篇paper\u0026gt;_\u0026lt;\n应该说，我在硕士之前做research的路子是很有一些问题的，这个问题主要在于我的野心太大，常常想做一些以自己的能力/资源不大可能做出来的research，简直就像很多民科想证1+1=2或者P != NP的人一样可笑。当时也没有人来指导自己的research，就拿一台i3小破笔记本自己一个人瞎想瞎折腾。后来有一位朋友和我说，他认为PhD需要培养两个重要的能力：其一是能够大致判断自己能否做出一项工作；另一点则是能够大致判断工作的impact。PhD应该在自己能够做出来的工作中，挑选impact最大的去做。而我当时显然就不具备判断自己能否做出某项工作的能力。\n研二的时候回到实验室开始做research，一开始和导师商量，打算做deep learning与manifold learning的结合，算是semi-supervised learning的一种吧。当时觉得这个工作最大的困难点在于如何用mini-batch去做manifold learning中graph的更新。一些已有的相关工作（如cvpr16的《Joint Unsupervised Learning of Deep Representations and Image Clusters》）基本上是都用一些iterative的方式来训练和迭代的。后来想了一段时间，觉得还是先从相关领域的paper复现开始做起吧。然后就开始复现semi-supervised learning的paper。大概有尝试复现了7、8篇吧，发现都无法复现出他们的效果，反而复现的baseline能比他们的baseline高5-10个点左右。终于在复现一篇领域大牛（无人不知的那种）的paper的时候复现出了paper claim的效果，结果复现他们的baseline比他们paper claim的自己的效果还要好\u0026gt;_\u0026lt;\n经历了一些失败的复现之后，向一位刚中了AAAI的小伙伴C请教了一些经验。C安利我做他们的领域，我听了他们的工作之后，当天晚上突然想了一个比较偏data mining的idea。第二天就写了代码实现一下，发现效果特别好。当时非常激动，觉得随便一弄效果就这么好，这要是认真调调岂不是要上天，结果那天的结果就基本上是最后调出来最好的结果了\u0026gt;_\u0026lt;然后匆匆写了一篇paper，submit到了IJCAI上。结果被reject掉了。AC评价说觉得是一个简单但是有效的工作，但是漏引了两篇10多年前idea相似的paper，我一看才知道原来10多年前就有人做过了相似的工作了，被拒得挺没有脾气的。后来这篇paper又submit到了AAAI上，有一位reviewer给了非常低的分，理由是认为data mining这类approach早就out-dated了。我后来也觉得这篇paper确实很难投中，就扔掉不管了。总得来说算是一段有些失败的research经验吧。\n除了自己做的research工作以外，我还与导师一起讨论review了很多paper，注意到有些会议里的review真是招呼满天飞，不禁感到有些失望。就开始思考自己究竟是否是真正想做research的人。最后得出结论，我想做的是真正实用的顶级的research，但我显然远没有那个能力，只得作罢。硕士期间的research经历基本就到此为止了。\n最后在这里安利一个沈向洋老师在华中科技大学给的talk: “How to do research”，里面分享了很多有用的方法。不过里面有些点我也不是特别同意（虽然我完全无法与沈老师相比），譬如他说做研究，应该有3年做不出来的觉悟。我觉得对大多数普通的PhD来说，这么长时间拿不到正反馈可能是会压力很大且非常痛苦的\u0026gt;_\u0026lt;\n找实习 先写一些简单的总结体会吧：\n 能找内推尽量找内推。一方面是有些公司可以免掉笔试避免自己翻车，另一方面是有内推人的话在很多公司可以帮忙查询进度什么的，比较方便。 多看公司的面经了解风格。不同公司考察的重点、风格可以有很大差异，一定要提前了解公司的面试。 简历上的内容一定要非常熟悉。这个没啥可说的了。 面试官真的是一家公司的门面，极大地影响我对公司的印象。 剩下的要点都在前面tips部分提过了，这里不再赘述。  实际上，我实习的第一个offer就是自己的dream offer Google，本来打算就此结束找实习了，把时间用来补CS基础上。陪妹子参加了一场拼多多的面试，与面试官聊了聊他们在做的事情以及难点与痛点的时候，竟然受到了一些启发，有了个idea（虽然这个fancy的idea最后没有work）。于是决定多投递多面试，与各家公司的面试官多聊聊。每家公司的面试官往往是公司里水平比较不错的人，尤其是最后一面技术面的面试官更是技术leader甚至是技术Boss，平时想要与他们聊天的机会可不容易获得。但是面试这样的事情能够让他们自动送上门来聊天，何乐而不为呢？\n在这样的想法下，我投递了阿里，腾讯，头条，百度，微软，hulu，airbnb，摩根士丹利。需要特别提一下的是Optiver。对Optiver的投递其实是比较巧合的。三年前ZJUCS有一位硕士学姐应届去了Optiver，我认识那位学姐的几个学弟，学弟们对学姐是极其推崇，各种膜拜。我想，这么厉害的学姐会选择的公司，那肯定也非常厉害，于是就这样投递了Optiver。当然要说明的是我并没有对Google以外的公司有做什么面试准备，也没继续刷题，因为我早就确定了要去Google实习了。而其他公司给我发了offer之后我也是立刻拒掉，避免耽误其他同学的机会。下面按时间顺序简单谈谈各家公司的面试。\nGoogle 流程：两轮电面，主要是问算法题。\n过程：找实习时候的dream company就是Google了。平时有空的时候会做一下Google的kickstart比赛，并因此拿到了去Google参观的机会，参观完更想去Google了。于是投递了Google的实习。当时自己想去Google上海做开发SWE，同时Google的算法岗ML SWE也只在冬令营中产生，也没办法投递。运气不好的是当时Google的面试与IJCAI会议的ddl基本上重合，所以当时是做research赶paper与刷题准备面试同时进行。Google的面试安排相对较早，大约是在2月底吧。有趣的是，由于我在填Google的表的时候写了中英文面试均可，结果HR小姐姐就给我安排了两场英文面试Orz 而且都是晚上11点半或者早上7点这样的事件Orz 第一面似乎是位印度的Googler，结果因为一些原因鸽了我。第二次一面是一位新加坡的Googler，结果又因为被浙大的邮箱坑了进不去Google的视频会议。第三次一面试终于顺利完成，面试官是一位纽约的小哥哥，题目并不难，我很轻松地写完之后我们闲聊了一会儿。二面是一位上海的Googler，题目挺难的，而且给的压力不小，差点就崩了，好在我还是稳住了心态顺利地做了出来。面试完半小时左右就收到HR小姐姐的消息通过了面试，此时我还没从面试的地方走回宿舍\u0026hellip;\u0026hellip;后来过了Google的Hiring Committee，进入Team Match后竟然也很快（不到半天）地就被捞了起来，还有点受宠若惊。捞我的人（也就是我后来的Host）希望我能去北京做ML SWE，我想应该是看中了我的ML背景吧。我问HR小姐姐我的项目内容，小姐姐给我发了俩，说不确定是哪个，其中一个内容大概是自动化地针对手机设备压缩网络，我比较感兴趣；另一个项目看上去是与TensorFlow相关的，感觉也不错。同时注意到自己的Host是Berkeley的PhD和美国一所大学的professor，还发现那个组的创建人是李飞飞。在与妹子商量后，就接了这个offer。可以说第一个offer就是自己的dream offer，非常幸运和激动。\n拼多多 流程：笔试+HR面 + 两轮onsite技术面\n过程：投递的是算法岗。拼多多在3月中旬的时候在浙大附近租了个酒店，在那里进行了现场的面试。HR通知我们早早地过去，然后在那边等着排队，记得自己等了挺久的。先进行了HR面，主要是问我对公司的工作时间什么看法，我当然是回答996不在话下，不然我可能就要当场被赶出去了？之后一面技术面问了一道数据结构的coding题。一面的面试官有些傲慢，一开始还弄错了一个地方怼了我一会儿，后来我只能耐心纠正他的错误。之后问了些机器学习基础与项目的问题。这位面试官让我对拼多多的印象非常糟糕，后来也就直接拒了offer，秋招也没有投递。二面技术面倒是感觉不错，问了一道很难写的链表题目，我比较轻松地写出来之后同样问了机器学习基础与项目的问题。面试完过了一两周吧，晚上10点半接到offer call，直接拒掉了。\n摩根士丹利 流程：全英文，笔试+电面+两轮onsite技术面\n过程：投递的是C++开发岗。3月底大摩突袭打电话电面，全程英文面试，问了很多数据结构、操作系统与计算机网络的基础问题，最后问了一道system design的题。之后约了4月下旬的onsite面试，我与妹子一块参加。结果因为一些原因（起晚了）到达现场迟到了，非常不好意思。到达现场之后尴尬地发现除了我和妹子之外的所有候选人都穿着正装Orz 现场先做了一点笔试题，交了之后hr小姐姐就带人去面试。面试也是全程英文面。两轮面试问的都是数据结构、操作系统、计算机网络与system design的题。两位面试官给我留下的印象都不错，谦逊和气，水准也不错。一位面试官当时问我有了哪些offer，我就诚实地回答了一下，面试官非常惊讶地问我\u0026quot;Then why do you come to Morgan for an interview?\u0026ldquo;我说自己想稍微了解一下金融的情况。大摩也是在面试完大约一两周后来了offer call，我拒绝之后并说明了自己的去向，HR说那我们继续保持联系。\n头条 流程：笔试（内推可免)+3轮视频面+HR面\n过程：内推的是头条产品的推荐算法岗。4月初进行了前两轮技术面。头条很喜欢考算法题，两位面试官都问了很难的算法题，当时比较困状态不好，艰难地写出来之后又问了一些数学基础、机器学习基础和项目的问题。二面结束5分钟后接到电话约三面。过了两天进行了三面，这次的题倒不是很难，写了两道之后面试官问了一些操作系统、编程语言的问题，最后问了我一个场景设计题。面完5分钟后收到offer call。最后还是拒绝了。\n阿里 流程：笔试（内推可免)+3轮电面+1轮交叉面+HR面\n过程：内推的是阿里搜索推荐部门的算法岗。4月初的一个晚上一面，面试官是内推我的师兄，我觉得可能怕被骂防水有点矫枉过正，问了足足70分钟的问题，主要是算法题（很简单而且不用写代码）、机器学习基础、深度学习基础与项目问题。过了两天进行了二面，也是算法题（很简单而且不用写代码）、机器学习基础、深度学习基础与项目问题，面试官有问一些开放性的问题，还蛮有意思的。过了一周左右进行了三面，基本上只问了项目问题和开放性问题，后来知道那个开放性问题竟然是他们投kdd的paper\u0026hellip;\u0026hellip;然后过了挺久的，在安徽参加valse的时候突然接到电话，原来是阿里的交叉面（即另一个部门的人来面试我），问了机器学习基础和项目的问题，还问了深度学习框架的一些实现细节（不知道为什么问我这个，但还是回答了出来）。总得来说技术面试体验还可以。又过了一周，晚上9点半，接到阿里HR的电话，阿里HR还真是如传闻一般\u0026hellip;\u0026hellip;后来拒了offer了。\n腾讯 流程：笔试（内推可免）+3轮电面+HR面\n过程：投的是数据挖掘岗位。比较尴尬的是，当时接到了优图Lab的电话，说他们要求实习4个月以上，问我能不能满足要求，我没经过思考就说了那肯定不行，和导师说好了3个月。然后就面试终止了。我真傻，我本来面试的目的就不是去实习啊，直接答应下来说可以4个月就好了\u0026hellip;\n微软 流程：笔试（内推可免）+3轮onsite面\n过程：找学长内推了微软苏州的SDE，与妹子一起去苏州onsite。一面问了项目和一个算法题，又问了两个设计模式的题。面试官给我的印象非常差，看不懂Range For就challenge我，没用过priority_queue也challenge我。二面的面试官比较nice，先问了项目。之后问了一道比较简单的算法题，然后是难一些follow-up，都相对轻松地解决了。最后还剩下10分钟，面试官就开始和我闲聊，问了我已经拿的offer，并问我有没有肉翻的打算，我说至少要等妹子也有肉翻能力了再一起吧，暂时不考虑。三面面试官是一个leader，先问了一道system design，并讨论了一些面向对象的设计思想，然后问了我开放性的题目，比较难。总得来说，除了一面面试官给我印象非常差外，另外两个面试官都很nice，尤其三面的面试官水平感觉也很好。\nOptiver 流程：全英文，笔试+电面+两轮onsite面\n过程：\n我投递的是C++ developer。之前提到，投递Optiver的主要原因是相信大神S学姐的眼光。在校期间听说了不少S学姐的传说，据说她读书期间写System代码就从来是bug-free的，秋招的时候腾讯问她“你开个价吧”，但照样被她拒绝。还听说她当时是拒了一家叫Jane Street的公司的offer去了Optiver。不过S学姐的那些传说我也没有向她考证过。后来我才知道S学姐是浙大第一个应届进Optiver的人，而我则是第二个。\n总之我就这样投递了。过了几天收到笔试通知，笔试题有两套，一套是在一个平台上做两道C++偏数据处理的题目。另外一套是一些数学智力题，很多题目难度非常大，做得我头晕眼花。做完之后第二天接到HR小姐姐的电话，开始了HR面。HR的口语非常好，我听上去与native speaker没有什么差别，问了许多比较有趣的问题，我也一一回答。面试完过了两小时，HR给我打电话问我愿不愿意做一下公司另一个岗位Application Engineer (AE)的笔试题。我一向是相当flexible的，就答应了下来。这个岗位的笔试题主要是一些与Linux操作相关的问题。第二天HR给我打电话，说我AE的题做的分非常高，建议我先和这个Team的人交流下，看看感不感兴趣，我反问难道我C++ Developer的分不高吗。HR说了两点。1. HR觉得我的沟通能力很不错，而AE非常需要沟通能力，她觉得AE说不定会挺适合我的。2. 我投递得比较晚，Developer他们已经有一些不错的候选人了，不一定能排得到我。HR问我为什么想做C++ Developer，我诚实地说因为周围有一些大神朋友是做System Developer的，我和他们交流觉得挺有意思的，而且我觉得System Developer的技术很硬核，具有很好的技术护城河，能够让我在多年后仍然保持很强的竞争力。HR于是建议我与两个team的人都聊聊，看看自己对哪一块更感兴趣。我接受了HR的建议，毕竟我早就决定去Google实习了:) 与越多越的人交流我越开心。\n去大摩参加onsite面试的高铁上我接到了Optiver面试电话，稍微想了一下，我决定就接受了面试，因为我其实不在意拿不拿得到offer，面试环境差一些也不要紧。于是就这样在嘈杂的高铁上开始了AE的面试（听说我开始电面之后周围的人都瞬间不说话了，感谢有爱的乘客们）。面试的内容很多，考察了数据库、操作系统、Linux常用操作、运维场景问题、计算机网络、版本管理与system design等内容。这场电面是给我印象最深刻的电面之一，内容很多，且很多问题是很有意思的一些design问题，电面的面试官甚至还有两位\u0026gt;_\u0026lt; 无奈我自己其实不太懂运维的内容，很多问题都答不上来，只能靠猜测（如前面面试心得里所述，我是先claim了自己要猜测的），在一些design方面与面试官进行了比较多的讨论。面试官的脾气也非常好，并没因高铁上时常响起的播报声而恼怒，而是一直说never mind, that\u0026rsquo;s ok，让我感到非常非常不好意思。如果早知道高铁上环境如此嘈杂，我就推迟面试时间了\u0026hellip;\u0026hellip;\n然而，这次面试让我意识到自己和公司的AE也即运维岗的技术栈很不match，发现自己对运维也不感兴趣，后来HR联系我的时候，我就请她还是继续安排我走system developer的流程，HR尊重了我的意愿。然而大约在4月22日的时候，HR打电话告诉我说公司的员工们大都去休年假了，这样可以与五一假期连一块，休一个比较长的假期。因此面试可能得安排到5月之后，我自然是欣然同意。可惜到了5月多的时候，HR联系我说他们已经有一些合适的候选人了，就不继续我的System Developer的面试了，并说如果我对AE有兴趣的话可以给我AE的offer。这一次的Optiver实习面试旅程就到此为止了。虽然没有去Optiver实习，但这次实习面试之旅为我后来秋招选择Optiver埋下了伏笔。\n百度 流程：笔试+三次技术面\n过程：过了百度笔试之后，大约在4月中旬接到百度的面试通知。三次技术面试都有考算法题、机器学习基础和项目等。百度的算法题不算难，大都是LeetCode medium难度吧。百度虽然这几年发展不好，名声口碑也一般，但是说实话面试官水平还是挺不错的，给我印象挺好。4月底的时候收到offer然后拒掉了，但是不知道为什么后面有一位百度的员工加了我微信，说我去实习的时候他负责带我Orz\nAirbnb 流程：笔试+笔试确认面+两次技术面+文化面\n过程：投递的是全栈工程师。投递的原因主要是听说Airbnb的package挺不错的，不加班，而且前景也还可以。大概是4月中旬接到笔试通知，笔试题同样是在一个平台上完成，算是一道稍微有点麻烦的模拟题吧，但也不算很难。做完笔试题的第二天有一位面试打电话来和我约笔试确认面。笔试确认面时间很短，大概是15分钟，面试官非常客气地问了我design的motivation是什么，并让我分析了一下复杂度，个人感觉只要代码是自己写的，这一面不会有任何问题。过了一两周之后安排了两次技术面试。技术面试的内容主要就是写算法题，不过Airbnb的算法题风格与其他家还不太一样，他们的题目思维难度不大，但常常较难实现，会有一些corner case什么的。一面的时候我在实验室的学生休息室面，结果附近在修路，非常吵，十分艰难地才把代码写出来，面试官不太满意。二面的时候换了个安静的地方，相对轻松地搞定了题目，面试官还比较满意。但是应该是由于我一面表现不好，Airbnb让我在备胎池里待了很久\u0026hellip;\u0026hellip;总得来说Airbnb的面试难度也挺高的，尤其是这种只做很难的算法/模拟题的风格，受运气/状态影响不小，一不小心就会挂。\nHulu 流程：笔试（内推可免）+三次技术面\n过程：投递的是软件开发工程师（SDE）。在5月的时候Hulu来浙大办了宣讲会，并于接下来几天在浙大安排了现场面试。这种送上门来的面试机会我当然不会错过。没有投递Research SDE（即算法岗）的原因似乎是Hulu不打算从浙大招算法实习生？总之是明确说了只招SDE。猜测可能是只收清北的吗hhh 总之就这样上场面了Hulu。一面的面试官看了我写满了机器学习项目的履历之后，决定问我分布式系统的问题，因为他在公司是做分布式系统的。尽管我一再强调自己完全没接触也没学过分布式系统，但还是被迫回答了两个问题。之后就开始写算法题了，第一个算法题是道LeetCode medium难度的题，大概花了5分钟秒杀。然后面试官给我出了一道hard难度的题，想了10多分钟，在面试官的提示下我终于给出了最优解，然后面试官没让我写代码，又问了我一道hard难度的题，然后又是想了10多分钟，这次终于没能给出最优解。当时我的做题能力就是medium难度基本秒杀，hard难度的要么不会，要么就得做很久才能做出来:) 总之面完之后面试官和我说了一句你辛苦了，然后就把我挂掉了，终于吃到了第一个也是唯一的一个拒信\u0026gt;_\u0026lt; 总得来说还是实力不济，Hulu的面试题大都是hard难度的，自己当时确实做不出来，而且3个月没刷题了手也生。\n至此，实习面试就全部结束了。总得来说各家公司的面试各有一定的特点，这可以通过看面经来了解。另一方面，这些面试也多多少少有一些共同点，考察的能力与一些相应的技巧我在本文前半部分也已经介绍过了，此处不再赘述。\n实习经历 Google的实习经历对我的影响、帮助都挺大，再加上Google可能是很多同学心目中的dream company，这里就简单介绍一下我在Google的实习经历，以供参考。当然，其中也夹杂了许多我的个人经历，那些绝对是个例现象，与Google无关。\n入职 Google的入职活动（onboarding day）还是挺有意思的，上午是一位技术同事志愿服务地带我们逛了北京Office的各个地方，并给了一些介绍，然后给我们分了Laptop。然后HR小姐姐Y带我们参加了一个活动，是整个大中华区当天的入职的Googler（Google员工）一起开一个会，介绍Google的文化、基本信息等等，有一位非常Senior的领导会一起聊一聊。我记得当时应该是台北那边的一位VP参加了会议。印象最深的是提问环节，我看到没有人有问题，我就问了一个问题：“你对新入职的Googler有什么建议吗？”VP回答：“Try to confident. Your products and efforts change the world.”\n之后与我的host见面聊了聊。他是一位非常nice的host，水平也很高，也很会带人，在实习期间教了我很多东西。host与我聊项目，是一个OCR的项目，我发现这个项目似乎和之前我得到的信息不太一样，就问他为什么变了。host告诉我说后来招了两个清华的本科EP实习生，打算让她们做之前安排我的项目。我还是比较flexible的，就愉快地接受了新项目。\n项目初期进展 新项目一开始做得很顺利，主要是需要我对Google一个很有影响力的开源项目(30k+ star)做一些改动，增加一些新的功能。确切地说，原始的项目的自动生成训练数据的训练脚本只支持字体文件作为输入，而我们期望它能够支持image-label这样的输入。这需要我阅读项目的代码结构（大概几十万或者几百万行代码），理解系统的设计、数据结构以及内部使用的算法，并找到自己需要改动的地方，再做修改。困难点在于这个项目并没有什么完善的文档，也没有（在我看来）非常完善的注释，需要直接阅读源代码。我大概花了一周大致看懂了实现原理（略去了一些技术细节），又花了一周左右理清思路并实现了需要的功能。但是我的噩梦才刚刚开始\u0026gt;_\u0026lt; 我开发的功能结合原始的训练代码训练出来的模型效果不合理得差。进行了一周多的debug，以及与host非常多的讨论，终于找到了bug在哪里，原来是原始的训练代码对于输入的数据是有一定的assumption的，但是在文档和注释中并没有说明。项目的训练数据均是由他们的代码自动生成的，这些数据会是符合这个assumption的，但是我新增的功能生成的数据则不符合这个assumption，这样会导致训练过程中调用的聚类算法中出现矩阵不可逆的问题，使得生成的训练模型效果很差。然而即使在修复了这个bug之后，模型的性能还是不能完全令人满意，又做了一周的实验慢慢提升性能。最终的效果虽然还不完全令人满意，但已经勉强可以使用。至此，我已在Google实习了一个月。\n这里顺带一提，在北京office的实习生们大多数都是清北的，而且很多同学都有本科甚至是初高中的竞赛背景。考虑到我的CS背景与他们的差距，这多多少少给了我一些peer pressure。又因为妹子在杭州实习，我周末就没什么安排，而我的房子租得又离公司非常近（步行5分钟），故我整个实习期间基本都是一周去7天公司，且在第一个月每天都是早上9点到晚上10点以后走的。顺带一提，Google确实相当注重work-life balance，我晚上的时候时常会闲逛一圈，极少看到有除了实习生之外的同事加班，周末则只能看到少数一些实习生。\n虽然第一个月的前两周我每周都会100个小时左右的时间在公司，但实际上我大概只有一半左右的时间花在自己的实习项目上，还有一半的时间则在如饥似渴地阅读Google内部的一些课程、资料。进Google之前我就听说公司有非常好的学习资源，而我可能在Google的时间只有这么3个月，我希望能够尽量地多学一些东西。不过遗憾的是我觉得我所看的学习资源比四大的课程基本都有明显差距，但想来也是，四大毕竟是最顶级的学校，且专门focus在教育上，要是还比不过Google的课程的话那也太没天理了。这两周我虽然学习/工作的时间很长，但项目进展顺利，也学到了不少东西，自己感觉非常得充实与满意。第一个月的后两周因为模型的效果一直很差，我给自己的压力很大，原因主要是觉得自己项目做得这么挣扎，一定是自己能力不足，要多花时间赶上，不能拖host的后腿。实际上我host没给我多少压力，对我也一直非常nice，但正因为如此，我更不想拖他的后腿（但我后来发现，项目做得挣扎是一个实习生尤其是ML实习生的常态:) ）。我一直希望能够尽快地让模型work，每天都会debug到11点多才离开公司，而且晚上睡觉睡得也不好，基本上每天都会梦到自己在debug模型，而且debug不出来。这段时间的经历也让我意识到自己的ML水平其实也不怎么高，并不能以一种很systematic的方式去逐步debug模型的问题，而且也对debug的进度没有很好的把握，并不能合理地预估让模型work的工期。算法岗与开发岗不太一样，后者的工作我往往可以相对合理地预估工期。例如我前两周的工作就更偏向于开发，我每天都能有一些合理的进度，并且我能够相对清晰地预估自己需要多久阅读理解代码/实现功能/debug等等。另一方面，我做的算法岗的工作很多时候的工作内容就是调参数/调模型/调特征，会相对无聊，且我往往没有很好的insight（尤其是deep learning相关的），这让我感觉不到很好的技术沉淀与积累。总之，这段时间的经历让我又开始思考算法岗/开发岗的选择问题，并且对我最后做出选择起到了关键的作用。\n顺带一提的是关于实习生转正的事情。由于妹子表示在阿里的组非常好，师兄们带她都很尽心，人也很好，晚上下班也挺早的，故我此时的秋招打算就是去阿里做推荐。当然Google的转正还是要争取一下，可以用来compete嘛。\n进抢救室 （下面将描述完全与CS无关的事情了，完全可以跳过\u0026gt;_\u0026lt;）\n然而，更严重的问题出现了。我多年来一直肠胃不好，也去医院检查医治多次（但没做过胃肠镜），但都没什么效果。也许是因为实习的第三四周给自己的压力太大、工作时间太长，也许是因为还没习惯北京的饮食与生活，也许只是凑巧，总之我大概在第四周末尾开始出现胃溃疡引起的胃出血。但是我一个人生活，对生活也向来不太注意，竟然没留意到这个现象。大约胃出血了3、4天之后，某天晚上我上厕所的时候竟然感觉到一阵眩晕，眩晕得我无法站稳而摔了一跤。我意识到了不对，大概查询了一下，猜测自己是得了胃溃疡并且导致了胃出血。于是我决定第二天去附近的北医三院检查一下。我试图在网上挂号，但发现号子已经没了。\n但是第二天有一场会议，我不想耽误他人的进度，故第二天起来挣扎地去了公司。路上我已经察觉到不对：我甚至已经没法正常走路了，我保持站立或者走路姿势大概两分钟左右就会脑供血不足，而不得不蹲一会儿让大脑供上血再继续前行。开完会后，我和host说明了情况，host表示非常担心，让我赶紧去医院检查一下，我就打了个的独自前往医院。实际上我对当时自己的危险情况并没有一个清楚的认识，正确的做法应该是找一位朋友一起，并拨打120去医院。\n车子快要开到医院的时候开始堵了起来，原来北医三院门口的道路非常狭窄，但前来看病的病人非常多。堵了10多分钟，我开始有点焦急，出租车师傅建议我下车步行过去。思考了下，我下了车开始往医院前行。实际上这条道路只有区区几百米，但却绝对是我人生走过的最漫长的几百米。我每走大概10多米就要蹲一下，让脑子供上血，再继续前行。我运气还算不错，如果中间不幸晕了过去，各位可能就看不到这篇文章了。在路上我给妹子发了消息说了一下情况，并不敢告诉自己的家里人，怕他们担心。我终于还是这样磨到了医院，先去自助挂号机上挂号，同样显示肠胃科没号了，我想可能人工窗口有额外的号呢？于是我去人工窗口排队，排队的时候直接坐在了地上，前面排队的人还发出了轻蔑的嘲笑。终于排到我的时候，我直接说挂肠胃科，工作人员告诉我没号了。她问我现在什么情况，我解释了下自己的症状，说我觉得应该是胃溃疡导致的胃出血，现在脑子供血不足，工作人员说那要不给你挂个脑科吧:( 我苦笑了一下，问急诊科在哪里，她告诉我在地下一层，我于是继续挣扎着向急诊科磨去。\n总算磨到了急诊科，科室要先分诊，我直接上去描述了症状，分诊的医生让我先去边上测血压。我于是只好先去边上测血压，但是可能是因为出血过多血压太低，血压计一直测不出来。大概测了10来次吧，总算是拿到了一个结果，我赶紧拿着结果找分诊医生。此时我的状态已经非常非常糟糕，几乎走不了路，说话也非常费劲。医生看到我的状态说你怎么样啦，我感觉你是出血过多了，来我带你测一下血压，然后把我扶到血压计边上继续测，但怎么也测不出来。我非常虚弱地说了一句这大概是测不出来了，突然感觉想吐，就说您让开一下，然后吐了一地的血\u0026gt;_\u0026lt;，吐完说了句不好意思。医生赶紧让人去叫抢救室的人过来，随后我就躺上了抢救室的那种移动病床。躺下之后，我感觉自己的状态明显好转了，就和旁边的医生开玩笑说要不要这么夸张，这就送我进抢救室了？医生大概是怕我害怕，以一种相对轻松的态度告诉我说你刚刚吐了些血，我们要检查一下。把我送到抢救室的时候，医生问我有同伴一起来吗，我说没有。他们让我赶紧喊家人，我说自己一个人在外地实习，他们就说那你赶紧喊个朋友啊老师啊过来吧，没有一个人不行的。我于是拨打了同样在Google实习的另一个同学H，但他在睡午觉，没接到电话。然后不得已打了在北京实习另一家实习的女性好朋友L的电话。我与L关系很好，但因为怕妹子吃醋，所以万不得已不想让L过来。L接了电话之后，我简单描述了下情况，然后说你别慌我现在没啥事，很正常，你方便的话就赶紧过来吧。L二话不说直接答应，随即打车过来。\n之后医生给我做了很多检查，所幸检查结果都是正常，只有血压和血色素等指标很低。我说我现在感觉差不多好啦，一定要在抢救室待着吗，这里除了我以外的病人最年轻应该也有70岁吧。医生安慰我说应该没啥事，大概率是胃溃疡导致的出血，但是要做一下胃镜检查。我说那今天就能做吗。医生告诉我北医三院的肠胃科非常有名，预约胃镜通常都是要等一个月甚至3个月以上的，“但是我们急诊科去排应该可以快一点，今天或者明天就可以了。”我说那确认是胃溃疡的就能出院吗，医生笑了下应该很快的。这时候我给妹子打了个电话说了一下情况，她想要赶紧请假从杭州过来，我说再观望一下吧。\nL到了之后，医生让她去帮我买了很多生活用品，我意识到似乎就算是胃溃疡也会是一场相对持久的战役了。不过我自己感觉状态还不错，看她面如死灰的样子，就和她说点玩笑话缓和一下气氛。后来医生让L到急诊室外面去等。H这时候回了我电话，问我怎么了，我描述了一下情况，请他在下班之后来接替L的班，因为抢救室的病人是需要24小时有人陪护的，L一个人肯定是扛不住的。H也二话不说答应了。考虑到这样的24小时陪护不知道还要多久，我并不想太耽误这两位朋友，终于还是让妹子过来了。另一位老家在北京的浙大同学C知道了这个事情，也表示要一起过来。于是C和妹子一起买了高铁票出发过来。\n我又给host说明了一下情况，host非常担心，和Google的hr小姐姐们说了一下这个事情。hr小姐姐们也非常担心，赶紧问了一下我的情况，还有两位比较熟的小姐姐直接出发来公司看望了我，让我再次感受到了公司的温暖\u0026gt;_\u0026lt; 我和她们笑着聊了会儿天，她们发现我还挺能说的，状态也不错。我说不用担心，没啥事的，就是个小意外，等我出院吧。\n到了晚上C和妹子到了。后面的事情就省略说了。第二天做了胃镜，检查出来确实有两处严重的溃疡，高水准的医生用两个钛夹夹了一下。后来就转到肠胃科住院区去，并告诉了家里，我父亲之后来了北京。我住了一周的院，住院期间主要是妹子，我父亲和C陪护我，妹子主要负责照顾我的生活。期间还有一些朋友同学过来看我。巧合的是，我住院的主治医生是Google一位HR的闺蜜，定期向HR们汇报我的情况。经过了一周的治疗后我出院了。带妹子玩了两天之后送她回了杭州，然后休息了一天，就去公司学习去了。\n恢复实习 第一天去的晚上我host突然出现，和我说要不quit实习回家休养吧，还给我说了他Berkeley的导师给他说的一句话：“学业与事业是个橡胶球，挤一挤，变形了也总会恢复；身体与爱情是个玻璃球，挤一挤碎了就回不去了。”我解释说医生表示我现在其实状态已经相对正常了，只要不过分劳累、注意饮食、不要运动即可，是可以工作的。当时我心里有个很中二的想法，认为这一切的阻碍都是台阶，越是这样，我越是要迈过这些台阶，完成我的实习。另一个重要原因是我希望能用Google的offer来compete阿里的A+，因为我的profile直接面阿里应该是拿不到A+的。\n由于项目的算法部分已经勉强能用，后面的任务重心就转向了产品的前端与后台开发。我之前没有任何相关经验，只能从头学起。在一位朋友的指导下，我一周就连学带做搞了个简陋的雏形。后来就与host他们讨论界面的优化、功能的加强等等，就这么迭代地进行项目的改进。\n印象比较深的是我花了大量的时间在试图把我的服务部署到Google Cloud上，使得项目的用户可以接公司的WIFI即可访问到。然而Google的一些隐私相关的policy让这件看上去简单的事情变得异常麻烦，我试了很多办法都没能成功。最后按照host的建议，我向Google Cloud申请了一段时间的WiFi IP访问特权，结果帮忙查出了个Google防火墙的bug Orz 美国负责防火墙的同事表示这个bug他要上报领导解决。这使得我不得不放弃了部署到云上的打算，转而在我的台式机上部署并让手机端可以访问，但这件事情也花了很大的力气才搞定:) 这些时间花得是让我非常frustrated的，因为这些事情枯燥乏味，没有技术含量，如果不是policy的问题我只需要10分钟就可以搞定Orz\n在写前端、改进用户交互页面的时候，我意识到自己对这种工作内容是不感兴趣的；另外一方面，我的产品的impact也相对很小，潜在的用户大概是个位数的。这两者都让我对写项目的前端不是很提得起兴趣。不过我还是希望自己能把这个实习项目，还是很认真地改进项目，最后也算是做出了一个简陋的产品出来，勉强完成了项目的初期目标。在这段时间，我也有去接触一些其他在Google的同事，了解他们在做的事情，这些都引起了我对自己未来职业生涯的思考。\n后来公司的HR小姐姐问我要不要extend几周来补上住院的两周。我也直接拒绝了：我已迫不及待想回杭州了。答辩完，整理完所有项目的文档与代码，并与我的host以及两位co-host还有众多小伙伴告别后，我checkout了，并于第二天回到了杭州。Google的实习到此结束。\n总结 首先感谢我的诸位家人、朋友、同事、领导、师长等对我在这个阶段的支持与照顾，非常非常感谢。\n总得来说，由于种种原因，我的Google实习经历对自己来说不打算是特别成功的一次经历。当然，这与Google的关系不大，Google是一家非常好的公司：work-life balance，卓越的同事和leader，世界级的vision，认可度很高的履历，人性化的制度、管理与福利等等。我的同事们都很优秀又nice，给了我很多帮助；我的host和co-host们更是水平极高又认真负责，教了我很多东西。只是在Google中国工作似乎不完全是我现在所期望的生活。然而，往抢救室走了一趟之后，我又有些害怕阿里的工作时间与压力。这时候的我有了挺多迷茫的地方：似乎自己期望的工作内容与work-life balance不可兼得？我又对算法岗的工作有一些concern，有心转开发，但阿里的实习offer已经转成了秋招直通终面了，换转组或者岗在阿里又都是极其忌讳的事情。我究竟该何去何从？\n秋招 在实习部分已经总结过各家公司面试的特点了，这里就不再赘述了，只以简单的流水账形式说一下自己的秋招经历与心路历程。\n百度 我的秋招从百度的广告部门的算法岗开始，是实习过了面试之后自动给我转了秋招提前批。当时还在北京实习，被要求去公司参加onsite。总共有3轮技术面试，面试官问了一些coding、机器学习基础、项目和系统设计的问题。百度的面试官感觉实力还挺不错的。印象比较深的是百度面试官真的很喜欢考核各种设计问题，尤其是二面面试官，一定要我独立地设计一个系统，还得事无巨细地给出系统每个组成部分的算法、实现细节等等，即使我已经多次声称对那块知识不熟悉。\n腾讯WXG 第二家的面试是腾讯的WXG看一看团队的推荐算法岗，同样也是要求去公司参加onsite。可能是运气不好，这次面试给我留下了非常糟糕的印象。首先，我到了office之后，安保人员不让我进入office，需要在门口站着等面试官出来接，出示任何信息都没用。其次，面试官迟迟没有出现，而面试官联系我的电话又是总机电话Orz，我没法联系他。无奈之下，我只能按照邮件里说的拨打了腾讯深圳总部的相关电话，请他们帮忙催面试官，结果他们告诉我只能给面试官发消息，让我等面试官回复。在门口大约站了半小时后，腾讯深圳总部的校招热线告诉我说面试官回消息了，说马上就来。结果这一个马上又让我等了半个小时还不见人影。因为实习最后一周还有很多东西要整理，我没有时间继续浪费下去了，就选择离开，结果快回到Google的时候接到面试官的电话问我走了吗。Orz你们是认为我会在门口站两个小时等你们吗。面试官问我还回去参加面试吗，我说那行吧，就回去继续参加面试。总得来说面试不算很难。第三面是一位漂亮的小姐姐，面试完已经6点多了。我问还有第四面吗，小姐姐一笑，问我饿了吗。此时腾讯的员工们已经在领盒饭准备吃饭了，饭菜的香味飘来，我也确实感到了饥饿，就说是的。本以为她要拿一盒盒饭给我，没想到她再次温柔一笑，说我也饿了，我先去吃饭了，你在这里等下一位面试官吧\u0026gt;_\u0026lt;。四面面试官看上去挺年轻的，技术也很强，一直问我愿不愿意秋招去北京工作，我说我申请的是上海only啊，他说我们在上海没有组Orz 后来我强调说我只接受上海，我们只能不欢而散，他们把我放回了池子里。\n阿里 第三家的面试是阿里，同样是实习offer转秋招直通车，只需要一次面试。当时我内心的第一选择是秋招加入阿里，就很认真地准备了一下。面试官春招的时候已经面过我一次了，也没问什么特别的问题，只是特别问了我的意愿，我就照实说第一选择是阿里。面试官告诉我说等HR的面试吧。后来接了Optiver的offer之后我就拒掉了阿里了\u0026gt;_\u0026lt;\nOptiver 在即将结束实习的时候，Optiver的HR小姐姐给我打了电话问我秋招愿意考虑Optiver的机会吗，因为我有实习offer，就可以直通onsite面试了。我说当然愿意啦。HR与我聊了挺久的，问了我一些对公司的concern，并一一为我解答。最后HR说那我们约你下周travel来上海面试吧，我说不用不用，下周我就在杭州了。于是HR给我订了两张杭州去上海的商务座，约了实习结束的周一去上海onsite面试。HR告诉我说到时候会有两个技术团队的team lead一起面我，一个是公司的data team，工作内容会与machine learning相关，另一个是公司的system team，工作内容主要是system programming。我可以根据自己的喜好以及给我offer的team，选择一个加入，我欣然同意了。\n说实话，此时我还没有把Optiver放到内心的第一位置，当时的想法还是与妹子一起去阿里。不过我还是很担心自己能否承受得住阿里的工作强度，就与阿里的师兄交流了一下，他当时表示说应该还是可以的。\n实习checkout之后，我迫不及待地回到了杭州。妹子向我吐槽了很久她暑假的一些没有告诉我的遭遇，并且说了一些她家里比较棘手的事情。说完她就和我提了分手，转身回去，我只能一脸懵逼地回宿舍，收拾心情准备第二天的面试。我想那些棘手的事情可能会需要比较多的钱，而之前就听说Optiver的待遇丰厚，那么这个offer一定要拿下来。于是第二天就晕乎乎地坐上了高铁，坐上高铁之后给妹子发了个消息，说等我回来我们再好好聊聊。\n我带着少有的必胜的决心进了Optiver的上海office。面试安排在下午两点左右，我到得比较早，大约是下午一点，所以HR小姐姐先和我聊了会儿天。她先和我聊了一下自己的方向选择问题，她有些疑惑我本科毕业就大跨度地从航天转了CS，现在竟然又要从算法岗转开发岗。我大概解释了一下。我们又聊了一些公司culture什么的。HR大概告诉了我几点。其中有几点特别吸引了我的关注：\n 公司注重work-life balance。例如公司不提供晚饭，不鼓励大家晚上还继续加班。 公司的福利也是相当不错。有很多年假带薪病假等，也有一些免费的餐饮、咖啡厅、大额商业保险、健身房等等。 高频交易是一个竞争激烈的行业，公司希望大家都能够self-motivated地，独当一面地去做出有impact的工作。 公司招聘宁缺毋滥，highly selective。例如我实习面的AE岗位，最后公司也没有勉强招不合适的人。  技术面试终于开始了，两位team lead进入面试房间后先很客气地与我握手并做了自我介绍。随后他们给了我一道相当复杂的系统设计的问题。在提问以确认自己理解了题目之后，我进行了一些思考，并给出了第一个设计方案。两位面试官非常细致地问了我这个方案的各个细节之处、性能分析、trade-off等等，这些问题涉及到数据结构、算法、操作系统、体系结构与计算机网络的各种知识。好在我在说出自己的解决方案之前就已经对这些细节进行了思考，所以回答得还算流利。面试官接下来让我在白板上实现自己的代码，在这个过程中同时也考察了我的抽象能力、模块设计能力等等。写完代码并证明它是bug-free之后，面试官突然狡黠一笑，问我能不能再改进这个方案。与面试官进行了大量的讨论之后，我终于成功地给出了第二版的设计方案，当我给出来的时候一位面试官非常激动地说了一句“Exactly！\u0026ldquo;然而两位面试官并不打算就这么简单地放过我，又继续问了大量的follow-up问题，直到确认我每个细节都考虑到了之后才终于流露出了满意的笑容。随后，他们让我问了一些问题。我最好奇的一个问题是，明明有一位面试官是data组的team lead，为什么并没有问我任何机器学习相关的问题，而是问了这么一个在我看来更偏system的问题。面试官告诉我说，这个问题在他们看来是problem solving ability的问题，而Optiver认为基础扎实、沟通能力出色并且有很好的problem solving ability的人可以胜任公司的任何一个IT岗位。我还问了一个问题是，他们选择optiver的最重要的原因是什么。他们告诉我是exciting work and impact。\n终于这轮面试结束了，时间大概过了两个小时左右。我休息了几分钟去上了个卫生间。这里有个小插曲，我突然收到一条来自腾讯的短信约我15分钟后面试，问我是否能参加，我回复了否。后面在Optiver head of IT面我的时候，腾讯的面试官突然打电话过来问我什么时候有空。好在Optiver面试官没有生气，还让我接了电话商量了和腾讯的面试时间。\n回到office里的时候注意到公司在为一位同事庆生，记得是一位毕业于MIT的小哥，我也过去分了点蛋糕吃。随后开始第二轮面试，第二轮的面试是Head of IT面我，也就是Optiver IT部门的老大。面试官问了一些项目相关的问题、我对一些技术的深入理解与思考等。之后就轮到我问了面试官一些问题。大约到了5点出头，面试官看了一眼时间，我估计面试官可能在思考下班的事情了，就只再问了一个问题，结束了面试。随后HR小姐姐送我离开了公司。\n毫无疑问，Optiver的面试在我参加的所有面试中最具有特点。这并不完全是说面试的难度很高或者压力很大（当然难度也确实很高），还包括面试的形式、内容、考察的能力等等。通过面试，需要具有扎实的基础、严谨的思维、优秀的沟通能力、出色的抽象问题并解决问题的能力等等。更重要的是，在与面试官讨论设计方案时，我可以说是首次在面试中感受到了exciting的感觉。\n面试的第二天下午，我接到了HR小姐姐的电话，通知我通过了两个部门的面试，并问我要选择哪一个部门。根据我的Profile，公司似乎更希望我去做ML相关的项目，但是我坚持要了System部门的offer。HR小姐姐告诉我如果是接System的offer的话，那第二天上午还需要再接受一场电话面试，考察一些CS基础，我欣然同意。\n电面如期而至，这次是更加细致地考察了CS的基础知识。又过了一天，HR的offer call到了，薪酬比其他公司开的要高不少。我后来才知道，这是Optiver秋招唯一的一个System Developer的offer。HR给了我一些时间考虑Offer的选择，并建议我与尽量多的朋友交流。\n小小的更新：本人已经从Optiver离职了，大家不用再找我内推啦Orz，谢谢大家~~\n腾讯数据库内核 从Optiver onsite面试回来后，我发现了妹子的事情似乎比自己想象中更加复杂一些。在了解到了更多的真相之后，我的第一选择就不再是阿里了。我去喝了点酒\u0026gt;_\u0026lt; 也是过去几年内第一次喝酒，然后就引发了酒精过敏。过敏当天腾讯的电面过来了。为了避免上次被Location不合适的部门打捞的问题，这次特地找人内推了上海的数据库内核团队，并且投递的是开发岗。面试官主要问了一些操作系统与数据结构的知识，还问了一点算法题和计算机网络。由于我简历上都是机器学习的项目，面试官就没有问，面试也很快就结束了。第二天大团队在深圳的leader面我，考核范围与之前相同，但问了很多Linux系统相关的东西。面完问我愿意去深圳吗，我说我肯定不考虑上海/杭州以外的office，面试官说那行，给你上海的offer吧。10分钟后是腾讯的HR面，面完告诉我说等着接收预录取的邮件。总得来说这次面试的体验挺不错的，面试官们水平都不错，也很和气，HR也非常和气。\n过了两周左右，腾讯给我开了价格，让我稍微有些惊讶地开了个很高的价格。据我所知，国内的公司向来非常看重项目经历与岗位匹配度，因此我有点惊讶像我这样背景与岗位完全不匹配的候选人竟然能拿到这样的offer。看来腾讯的面试官们对我的潜力还挺看好的\u0026gt;_\u0026lt;不过我当时已经接了Optiver的offer了，因此也就直接拒绝了。不过让我有些没想到的是之后腾讯又联系了我好几次（4次以上？），非常有诚意，也感谢各位腾讯面试官的欣赏。其实这个offer也是一个挺不错的选择，工作内容有意思又核心，待遇也挺高，部门加班也不算多，如果没有Optiver的offer，我可能也会考虑这个offer的。\nGoogle 面完腾讯之后我又作死地去喝了一次酒\u0026gt;_\u0026lt;这次终于引起了相当严重的酒精过敏问题，让我一直发烧，连续几天都睡不了觉。喝完酒的第二天刚好是中秋节，回了趟家，并且因为不敢让父母知道自己喝酒的事情，没有去医院解决酒精过敏问题，只好终日在床上躺着。\nGoogle的转正面试在中秋节结束后的第一天。很遗憾我在去上海前并没能成功地睡着。因此大概是72小时没睡着地去了上海。在上海的时候碰到了一起来面试的NLP大佬工友F，与F一块去吃饭的时候进行了一些关于text style transfer的学术讨论，感觉挺有意思。也许是因为与人讨论学术问题带来的愉悦感，也许只是因为酒精过敏终于好转了些，当天晚上终于成功地睡着了一会儿\u0026gt;_\u0026lt;\n第二天到了Google的office进行面试。第一位面试官是毕业于Stanford的资深Googler，问了比较多的算法题。第二面是一位相对年轻一些的Googler，也考了两道算法题。虽然因为连续多天的缺乏睡眠而有些疲惫，但我还是顺利地把算法都写了出来。面完之后HR小姐姐问我想不想去国外的Office，我说我只考虑国内的Office\u0026gt;_\u0026lt;\nOffer选择 在与许多老师、朋友沟通后，我最终做出了选择Optiver上海的决定。这里引用一位浙大学长求职经历帖的话：”如果你跟我足够熟的话，私下问我我会告诉你的。或者你就当我是选择了给钱给得多的offer就好了。“\n这里简单谈谈我从算法岗转到开发岗的理由。这些理由在前文中也多多少少地提到了，此处也就不再赘述。其中最大的一个concern就是我对算法岗的工作内容有些不感兴趣。我担心自己对Optiver的data scientist岗位也不感兴趣，这才坚持选择了System Developer。不过公司在知道我的concern之后表示，我可以到公司之后看一看data scientist在做的事情，如果感兴趣的话也可以随时转岗，甚至两个岗位的项目一起做\u0026gt;_\u0026lt; 另一方面，我也觉得自己的工程能力还是太弱了一些，也想借着从事System Developer的机会把自己的工程能力培养起来。\n确认选择Optiver之后，我的秋招到此算是结束了。虽然我后面还面了几家公司，但主要也是奔着与面试官交流去的。\n一些学习资料推荐 这里简单推荐一些我看过的（有些看完了，有些看了部分）适合自学的学习资料，以供参考。因为我太懒了，所以覆盖的内容不全面，自学CS的同学也可以参考\rMIT的课表看看要学哪些内容。我个人推荐学习从一门导论课程开始，然后是6.null，然后是Berkeley的CS61系列。之后学习算法课程、操作系统课程、组成原理/体系结构课程与计算机网络课程。再之后，我相信各位已有足够的判断力选择自己感兴趣或者是需要学习的课程了。再次强调，上课不做题，等于白上课。\n数学 \rMIT 18.01，\rMIT 18.02：微积分。\n\rMIT 18.06：线性代数\n\rHarvard Stat110：概率论。印象深刻的有一句话，\u0026ldquo;Random variable is a function\u0026rdquo;。\n\rMIT 6.042J：Mathematics for Computer Science. 在我看来最有趣的数学课，如果TA能少上几节课就好了:(\nCS导论 \rMIT 6.001：Introduction to Computer Science and Programming in Python\n\rHarvard CS50: This is CS50!一门很好的导论课程，覆盖的范围非常之广，且内容与MIT的导论课程颇为互补。\nCS实用课程 \rMIT 6.null: CS实用工具集合介绍。强烈推荐早点看这门课，非常实用。\r这里有我之前写的一篇简介文章。\n数据结构与算法 \rMIT 6.006: Introduction to Algorithms，教材是CLRS。\n\rBerkeley CS61系列: 其实我没上过这门课，因为当年入门CS的时候这门课似乎还没录像？现在有公开的录像了，而且口碑也非常好。\n\rMIT 6.046: Design and Analysis of Algorithms. 进阶版，但其实前面6.006就已经内容不少了。\nStanford也有几门有点老但是也非常好的相关课程。不过我觉得上面这些课程内容更新，质量也不逊色，各位就看自己喜好来挑选吧。\n算法笔记：胡凡著。一位浙大学长写的使用c++实现基础数据结构与算法的书，写得挺清晰的，里面的代码也很实用。我现在面试之前还会翻一下这本书上一些算法的实现。\n操作系统 \rCMU 15-213: 教材是CSAPP。\n\rBerkeley CS162：youtube和B站上都有2019Spring的视频。professor上课上得很好，hw和lab也都很给力。美中不足的是hw的autograder没有开放出来，但好在lab有提供test case。\n\rMIT 6.824: 分布式系统。不久前终于感人地放出视频了。\n\rMIT 6.S081/6.828：2020也放出视频啦~\nModern Operating System\n组成原理/体系结构 \rCMU 15-213：教材是CSAPP。\n\rMIT 6.004：Computer Structure. 偏硬件，老师讲得很好。\nMHRD: From NAND to CPU. Steam上一款有趣的小游戏，从NAND开始搭建各种逻辑电路，最后制作出一款简易的CPU。\r这里有我之前写的一篇简介文章。\n\rCMU Computer Architecture: 无论是在CMU还是ETH，Onur每年都会将这门课的录像和课程资源都公开，这是怎样的一种情怀Orz 19年的录像中Slide不是很清晰，可以自己使用双屏配合一下；或者观看18年的录像。\nComputer Architecture: a Quantitative Approach\n计算机网络 \rStanford CS144: 这门课多年前有一个mooc版本，后来不知道为啥被撤了，但是授课视频还是流传了出来。我个人不是很适应这门课的授课视频，看的有点犯困，但是课程的Lab还是出得很好的。\nComputer Network: a Top Down Approach\n编程语言 \rBerkeley CS61系列: 系列的几门课使用的是不同的语言，也都有很不错的配套作业，又基本都有视频公开，因此蛮推荐使用这个系列的课程来学编程语言的。\n\rStanford CS41: Python Language Programming. 可惜没有视频，作业挺有意思的。其实我觉得学语言比较好的一种方式就是学了语法之后做一些练手的项目、作业，这样会掌握得比较快。\n\rStanford CS106L: C++ Language Programming. 前文也介绍过了，我觉得那本Full Course Reader写得真的很好，推荐一下~\n还有一些领域内很知名的书，这里就不再专门推荐啦，这些课程里也会有介绍/推荐。这里再啰嗦一句，对大多数人来说，往往只需要学会某种编程语言中20%不到的常用特性，而这20%的常用特性往往占了实际使用这门编程语言中的90%。所以我不是很建议一开始弄本厚厚大大的书看，那样又吃力又缺少反馈，而且可能会花大量精力在自己根本用不到的地方。我其他的编程语言似乎都是用官方tutorial入门的，这里也就不推荐啦。\n软件工程 \rMIT 6.031: Software Construction. 算是介绍软件工程的一些知识吧，包括如何写出更鲁棒的代码等等。有很好的在线阅读资料，但可惜没有公开的视频。\n\rMIT 6.172: Performance Engineering of Software Systems. 讲的是如何优化程序的性能，非常有趣的一门课。\n机器学习 浙大的同学来蹭蔡登老师的课\u0026gt;_\u0026lt;\n\rCoursera Andrew NG的Machine Learning：机器学习之路从这里开始。\n\rStanford CS229：Machine Learning. Youtube上有视频。\n\rCMU 15-701：Intro to Machine Learning. 就找到这么一年有视频的。\n\rCoursera PGM：知名课程。\n\rCMU 15-708：Probabilistic Graphical Model 我只看过两个Lecture。\n下面有几本书，不过还是推荐和课程一起看。\nPattern Classification (PC)：比较老的书了，但是内容还是很有意义。\nElements of Statistical Learning：insight很多。\nPattern Recognition and Machine Learning (PRML)\nMachine Learning: a Probabilistic Approach (MLAPP)\nInformation Theory, Inference, and Learning：可惜David J. C. MacKay英年早逝。\n深度学习 \rStanford CS231n：Deep learning for CV. 推荐深度学习从这里开始\n\rStanford CS224n：Deep learning for NLP.\n\rBerkeley CS285：Deep RL. 我只挑着看了几个Lecture，小伙伴说好。\n\rDeep Learning Book：花书。\n尾声 本来这篇的主要目的是总结一些自己的面试心得供大家参考，后来又加入了自己自学CS历程的介绍、心得等，又介绍了自己找工作的历程和思考，反而使得本文的后半部分显得有些喧宾夺主了\u0026gt;_\u0026lt; 此时突然想到一位师兄博客里讨论的话题：“如果能回到十年前，你会对过去的自己说什么？”如果我能回到开始CS的旅程之前，我也许会对过去的自己说：“你会经历一段难以置信、跌宕起伏的旅程。你会遇到很多志同道合的好友，以及你十分尊敬的师长。虽然你也会走很多弯路，碰到很多困难与挫折，但是不要担心，你一直兢兢业业、勤勉刻苦，你的努力最终都会得到回报。”\n总之，我希望这篇文章里所写的自己的一些经历、思考、心得、总结等能对后来者起到一些帮助。如果你在阅读了这篇文章之后觉得有一些收获，那本文的目的也就达到了。\n各位同学，我们江湖上见。\n","date":1582792977,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582792977,"objectID":"d9f150046442053290706ea01c6c4274","permalink":"https://conanhujinming.github.io/post/tips_for_interview/","publishdate":"2020-02-27T16:42:57+08:00","relpermalink":"/post/tips_for_interview/","section":"post","summary":"分享19年春/秋招拿下10来个算法/开发offer的面试经历和心得；本科航天转专业自学CS的心得；推荐自学CS的学习资料","tags":["面试","自学CS","秋招"],"title":"19CS小硕校招面试心得与自学CS经验及找工作分享","type":"post"}]